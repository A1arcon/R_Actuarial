df <- rbind(datos[,c("Ozone","Solar.R")],datos_imp[,c("Ozone","Solar.R")])
df$Datos <- c(rep("Sin Imputar",nrow(datos)),rep("Imputados",nrow(datos_imp)))
# Para el Ozono
plot_multi_histogram_density(df = df,feature = "Ozone",
label_column = "Datos",
mean = FALSE,ylab = "Densidad",
alpha_dens = 0.35,) -> hist_mean_ozone
hist_mean_ozone
df <- rbind(datos[,c("Ozone","Solar.R")],datos_imp[,c("Ozone","Solar.R")])
df$Datos <- c(rep("Originales",nrow(datos)),rep("Imputados",nrow(datos_imp)))
# Para el Ozono
plot_multi_histogram_density(df = df,feature = "Ozone",
label_column = "Datos",
mean = FALSE,ylab = "Densidad",
alpha_dens = 0.35,) -> hist_mean_ozone
hist_mean_ozone
# Para la Radiación Solar
plot_multi_histogram_density(df = df,feature = "Solar.R",
label_column = "Datos",
mean = FALSE,ylab = "Densidad",
alpha_dens = 0.35,) -> hist_mean_solar.r
hist_mean_solar.r
# Para el Ozono
plot_multi_histogram_density(df = df,feature = "Ozone",
label_column = "Datos",
mean = FALSE,ylab = "Densidad",
alpha_dens = 0.35,
alpha_hist = 0.4) -> hist_mean_ozone
hist_mean_ozone
# Para la Radiación Solar
plot_multi_histogram_density(df = df,feature = "Solar.R",
label_column = "Datos",
mean = FALSE,ylab = "Densidad",
alpha_dens = 0.35,
alpha_hist = 0.4) -> hist_mean_solar.r
hist_mean_solar.r
# Ambas variables
plot(datos_imp$Ozone,datos_imp$Solar.R)
# Ambas variables
plot(datos_imp$Solar.R,datos_imp$Ozone)
# Ambas variables
plot(datos_imp$Solar.R,datos_imp$Ozone,xlab="Solar.R", ylab="Ozone")
fondo_plot()
points(datos_imp$Solar.R,datos_imp$Ozone,xlab="Solar.R", ylab="Ozone")
points(datos$Solar.R,datos$Ozone,xlab="Solar.R", ylab="Ozone")
datos_imp %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone"))
# Ambas variables
plot(datos_imp$Solar.R,datos_imp$Ozone,xlab="Solar.R", ylab="Ozone")
fondo_plot()
datos_imp %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone"))
# Ambas variables
datos_imp %>% with(plot(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone"))
fondo_plot()
datos_imp %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone"))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="red"))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="darkblue"))
datos_imp %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="red"))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="darkblue"))
hist_mean_solar.r
# Ambas variables
datos_imp %>% with(plot(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone"))
fondo_plot()
datos_imp %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="purple"))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="golden"))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="gold"))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="gold",pch=4))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="gold",pch=21))
# Ambas variables
datos_imp %>% with(plot(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone"))
fondo_plot()
datos_imp %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="purple"))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="gold",pch=21))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="gold",pch=16))
datos_imp %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="purple",pch=16))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="gold",pch=16))
# https://stackoverflow.com/questions/6957549/overlaying-histograms-with-ggplot2-in-r
plot_multi_histogram_density <- function(df, feature, label_column=NULL,
histogram=TRUE,density=TRUE,mean=TRUE,
title=NULL,subtitle=NULL,
ylab="Density",xlab=feature,
alpha_hist=0.7,alpha_dens=0.7) {
# En caso de que no haya grupos
if(is.null(label_column)){
label_column = "Histograma"
df[,label_column] = as.factor(rep("Datos",nrow(df)))
}
# Definimos los colores
df[,label_column] <- df[,label_column] %>% as.factor()
colores = df[,label_column] %>% levels() %>% length() %>% rainbow()
library(ggplot2)
plt <- ggplot(df, aes(x=df[,feature],
fill=df[,label_column]))
# Histograma
if(histogram){
plt <- plt + geom_histogram(alpha=alpha_hist, position="identity",
aes(y = ..density..), color="black")
}
# Densidades
if(density){
plt <- plt + geom_density(alpha=alpha_dens)
}
# Caso raro...
if(!histogram&!density){
warning("No puedes tener 'histogram'=FALSE y 'density'=FALSE.")
return()
}
# Le ponemos lo demás
plt <- plt +
# Relleno
scale_fill_manual(name=label_column,values=colores)
# Media de los histogramas
if(mean){
# Media global
plt <- plt + geom_vline(aes(xintercept=mean(df[,feature],na.rm = TRUE),color="Global"),
linetype="dashed", size=1)
valores = c(Global="red")
# Media por categoría
if(length(colores)>1){
for(i in 1:length(colores)){
nivel = levels(df[,label_column])[i]
comando <- paste0("plt <- plt + geom_vline(aes(xintercept=mean(df[df[,label_column]=='",nivel,"',feature],na.rm = TRUE),color='",nivel,"'),linetype='dashed', size=1)")
eval(parse(text=comando))
valores[i+1] <- colores[i]
names(valores)[i+1] <- nivel
}
}
# Le ponemos los títulos
plt <- plt + scale_color_manual(name = "Media",
values = valores)
}
plt <- plt +
# Eje Horizontal
geom_hline(yintercept=0,color="black", size=1) +
# Títulos
labs(title=title,
subtitle=subtitle,
y=ylab, x=xlab)
# Valor de retorno
return(plt)
}
# Para el Ozono
plot_multi_histogram_density(df = df,feature = "Ozone",
label_column = "Datos",
mean = FALSE,ylab = "Densidad",
alpha_dens = 0.35,
alpha_hist = 0.4) -> hist_mean_ozone
hist_mean_ozone
# Para la Radiación Solar
plot_multi_histogram_density(df = df,feature = "Solar.R",
label_column = "Datos",
mean = FALSE,ylab = "Densidad",
alpha_dens = 0.35,
alpha_hist = 0.4) -> hist_mean_solar.r
hist_mean_solar.r
rainbow(2)[2]
# Ambas variables
datos_imp %>% with(plot(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone"))
fondo_plot()
datos_imp %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col="purple")rainbow(2)[1])
datos_imp %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col=rainbow(2)[1]))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col=rainbow(2)[2]))
# https://stackoverflow.com/questions/6957549/overlaying-histograms-with-ggplot2-in-r
plot_multi_histogram_density <- function(df, feature, label_column=NULL,
histogram=TRUE,density=TRUE,mean=TRUE,
title=NULL,subtitle=NULL,
ylab="Density",xlab=feature,
alpha_hist=0.7,alpha_dens=0.7,
color_vector="viridis") {
# En caso de que no haya grupos
if(is.null(label_column)){
label_column = "Histograma"
df[,label_column] = as.factor(rep("Datos",nrow(df)))
}
# Definimos los colores
df[,label_column] <- df[,label_column] %>% as.factor()
if(color_vector="viridis"){
colores = df[,label_column] %>% levels() %>% length() %>% viridis::viridis()
}else if(color_vector="rainbow"){
colores = df[,label_column] %>% levels() %>% length() %>% rainbow()
}else{
colores = color_vector
}
library(ggplot2)
plt <- ggplot(df, aes(x=df[,feature],
fill=df[,label_column]))
# Histograma
if(histogram){
plt <- plt + geom_histogram(alpha=alpha_hist, position="identity",
aes(y = ..density..), color="black")
}
# Densidades
if(density){
plt <- plt + geom_density(alpha=alpha_dens)
}
# Caso raro...
if(!histogram&!density){
warning("No puedes tener 'histogram'=FALSE y 'density'=FALSE.")
return()
}
# Le ponemos lo demás
plt <- plt +
# Relleno
scale_fill_manual(name=label_column,values=colores)
# Media de los histogramas
if(mean){
# Media global
plt <- plt + geom_vline(aes(xintercept=mean(df[,feature],na.rm = TRUE),color="Global"),
linetype="dashed", size=1)
valores = c(Global="red")
# Media por categoría
if(length(colores)>1){
for(i in 1:length(colores)){
nivel = levels(df[,label_column])[i]
comando <- paste0("plt <- plt + geom_vline(aes(xintercept=mean(df[df[,label_column]=='",nivel,"',feature],na.rm = TRUE),color='",nivel,"'),linetype='dashed', size=1)")
eval(parse(text=comando))
valores[i+1] <- colores[i]
names(valores)[i+1] <- nivel
}
}
# Le ponemos los títulos
plt <- plt + scale_color_manual(name = "Media",
values = valores)
}
plt <- plt +
# Eje Horizontal
geom_hline(yintercept=0,color="black", size=1) +
# Títulos
labs(title=title,
subtitle=subtitle,
y=ylab, x=xlab)
# Valor de retorno
return(plt)
}
# https://stackoverflow.com/questions/6957549/overlaying-histograms-with-ggplot2-in-r
plot_multi_histogram_density <- function(df, feature, label_column=NULL,
histogram=TRUE,density=TRUE,mean=TRUE,
title=NULL,subtitle=NULL,
ylab="Density",xlab=feature,
alpha_hist=0.7,alpha_dens=0.7,
color_vector="viridis") {
# En caso de que no haya grupos
if(is.null(label_column)){
label_column = "Histograma"
df[,label_column] = as.factor(rep("Datos",nrow(df)))
}
# Definimos los colores
df[,label_column] <- df[,label_column] %>% as.factor()
if(color_vector=="viridis"){
colores = df[,label_column] %>% levels() %>% length() %>% viridis::viridis()
}else if(color_vector=="rainbow"){
colores = df[,label_column] %>% levels() %>% length() %>% rainbow()
}else{
colores = color_vector
}
library(ggplot2)
plt <- ggplot(df, aes(x=df[,feature],
fill=df[,label_column]))
# Histograma
if(histogram){
plt <- plt + geom_histogram(alpha=alpha_hist, position="identity",
aes(y = ..density..), color="black")
}
# Densidades
if(density){
plt <- plt + geom_density(alpha=alpha_dens)
}
# Caso raro...
if(!histogram&!density){
warning("No puedes tener 'histogram'=FALSE y 'density'=FALSE.")
return()
}
# Le ponemos lo demás
plt <- plt +
# Relleno
scale_fill_manual(name=label_column,values=colores)
# Media de los histogramas
if(mean){
# Media global
plt <- plt + geom_vline(aes(xintercept=mean(df[,feature],na.rm = TRUE),color="Global"),
linetype="dashed", size=1)
valores = c(Global="red")
# Media por categoría
if(length(colores)>1){
for(i in 1:length(colores)){
nivel = levels(df[,label_column])[i]
comando <- paste0("plt <- plt + geom_vline(aes(xintercept=mean(df[df[,label_column]=='",nivel,"',feature],na.rm = TRUE),color='",nivel,"'),linetype='dashed', size=1)")
eval(parse(text=comando))
valores[i+1] <- colores[i]
names(valores)[i+1] <- nivel
}
}
# Le ponemos los títulos
plt <- plt + scale_color_manual(name = "Media",
values = valores)
}
plt <- plt +
# Eje Horizontal
geom_hline(yintercept=0,color="black", size=1) +
# Títulos
labs(title=title,
subtitle=subtitle,
y=ylab, x=xlab)
# Valor de retorno
return(plt)
}
df <- rbind(datos[,c("Ozone","Solar.R")],datos_imp[,c("Ozone","Solar.R")])
df$Datos <- c(rep("Originales",nrow(datos)),rep("Imputados",nrow(datos_imp)))
color_vector = c("red","darkblue")
# Para el Ozono
plot_multi_histogram_density(df = df,feature = "Ozone",
label_column = "Datos",
mean = FALSE,ylab = "Densidad",
alpha_dens = 0.35,
alpha_hist = 0.4,
color_vector = color_vector) -> hist_mean_ozone
hist_mean_ozone
# Para la Radiación Solar
plot_multi_histogram_density(df = df,feature = "Solar.R",
label_column = "Datos",
mean = FALSE,ylab = "Densidad",
alpha_dens = 0.35,
alpha_hist = 0.4,
color_vector = color_vector) -> hist_mean_solar.r
hist_mean_solar.r
# Ambas variables
datos_imp %>% with(plot(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone"))
fondo_plot()
datos_imp %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col=color_vector[1]))
datos %>% with(points(Solar.R,Ozone,xlab="Solar.R", ylab="Ozone",col=color_vector[2]))
n <- 1000000 #Número de simulaciones de S
p <- 0.20 #parámetro de la binomial (p).
size <- 4 #parámetro de la binomial (n).
#Densidad de los montos de los siniestros:
f <- c(7/18, 5/18, 3/18, 2/18, 1/18)
sum(f)
d = 2
u = 4
regresa.una.S<-function(){
N=0
bandera<-sample(x = 0:1, size = 1,replace = T,prob = c(0.7,0.3))
if(bandera!=0){
while(N==0){
N = rbinom(n = 1,size = size, prob = p)
}
}
if(N>0){
Xj <- sample(x = 0:5,size = N,
replace = T,prob = f) #Genera las que hubo.
}else{
Xj <- 0 #Si no hubo, el total es cero.
}
Yj<-pmax(pmin(Xj,u)-d,0)
return(sum(Yj))
}
set.seed(93)
S = replicate(n = n,
expr = regresa.una.S())
N=0
bandera<-sample(x = 0:1, size = 1,replace = T,prob = c(0.7,0.3))
if(bandera!=0){
while(N==0){
N = rbinom(n = 1,size = size, prob = p)
}
}
if(N>0){
Xj <- sample(x = 0:5,size = N,
replace = T,prob = f) #Genera las que hubo.
}else{
Xj <- 0 #Si no hubo, el total es cero.
}
Yj<-pmax(pmin(Xj,u)-d,0)
sum(Yj)
N=0
bandera<-sample(x = 0:1, size = 1,replace = T,prob = c(0.7,0.3))
if(bandera!=0){
while(N==0){
N = rbinom(n = 1,size = size, prob = p)
}
}
if(N>0){
Xj <- sample(x = 0:5,size = N,
replace = T,prob = f) #Genera las que hubo.
}else{
Xj <- 0 #Si no hubo, el total es cero.
}
f
setwd("~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/ESTIMACION")
# PRE CARGA
my_dir <- "~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/ESTIMACION/"
DIA0 <- "0006"
HORA0 <- "1805"
source(paste0(my_dir, "1extras_precarga.r"))
paste0(my_dir, "1extras_precarga.r")
HORA0 <- "1805"
source(paste0(my_dir, "1extras_precarga.r"))
source(paste0(my_dir, "1extras_precarga.r"),encoding = "UTF-8")
source(paste0(my_dir, "1extras_precarga.r"),encoding = "default")
# PRE CARGA
my_dir <- "~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/ESTIMACION/"
DIA0 <- "0006"
HORA0 <- "1805"
source(paste0(my_dir, "1extras_precarga.r"))
# DIRECTORIOS: FUNCIONES Y BASES DE DATOS
my_dir_pob <- "~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/POBLACION/"
my_dir_fun <- "~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/ESTIMACION/"
#
my_copy_from <- "~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/REMESAS_UNICOM/"
my_copy_to <- "~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/REMESAS/"
my_save <- "~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/rodriguez/"
#
# CARTOGRAFIA
my_dir_carto_vve <- paste0(my_save, "pef/")
my_dir_carto_conf <- paste0(my_save, "diputaciones_pef/")
# FUNCIONES PROPIAS
source(paste(my_dir_fun, "2extras_conformacion.r", sep =""))
source(paste(my_dir_fun, "3extras_imputacion.r", sep =""))
source(paste(my_dir_fun, "4extras_estimacion.r", sep =""))
source(paste(my_dir_fun, "5extras_lee_y_comparte.r", sep =""))
# MANEJO DE INFORMACIÓN
library(data.table)
library(dplyr)
# PROCESAMIENTO EN PARALELO
library(doParallel)
library(foreach)
# IMPUTACIÓN MÚLTIPLE
library(lubridate)
library(mice)
# INFO CASILLAS
POB <- readRDS(paste(my_dir_pob, "CASILLAS_CON_ESTRATOS.RDS", sep =""))
POB$ID_EDO_DIST <- GEN_ID_EDO_DIST(POB$ID_ESTADO, POB$ID_DISTRITO_FEDERAL)
POB <- POB[order(POB$ID_EDO_DIST), ]
Nh <- table(POB$ID_EDO_DIST)
ID_EDO_DIST <- names(Nh)
# NOMBRES CONTENDIENTES Y PARTIDOS (PARA NO TENER QUE OBTENERLOS CADA VEZ)
my_variables <- c("ID_EDO_DIST", "LISTA_NOMINAL", "PAN", "PRI", "PRD", "PT", "PVEM",
"MC", "MORENA", "PES", "RSP", "FPM",
"PAN_PRI_PRD", "PAN_PRI", "PAN_PRD", "PRI_PRD",
"PVEM_PT_MORENA", "PVEM_PT", "PVEM_MORENA", "PT_MORENA",
"CI1", "CNR", "NULOS")
my_contendientes <- c("PAN", "PRI", "PRD", "PT", "PVEM", "MC", "MORENA",
"PES", "RSP", "FPM", "CI1")
my_partidos <- my_contendientes[-11]
# ACUERDOS DE COALICIÓN ARREGLADOS PARA MANEJO RÁPIDO
COAL <- data.frame(fread(paste(my_dir_pob, "COAL.csv", sep ="")))
COAL_VM <- COAL[,c("PAN", "PRI", "PRD")]
COAL_JH <- COAL[,c("PT", "PVEM", "MORENA")]
INFO_COAL <- list(hay_vm = rowSums(COAL_VM) > 0,
hay_jh = rowSums(COAL_JH) > 0)
INFO_COAL$COAL_VM2 <- COAL_VM[INFO_COAL$hay_vm,]
INFO_COAL$COAL_JH2 <- COAL_JH[INFO_COAL$hay_jh,]
INFO_COAL$IND <- 1*(COAL$CI > 0)
# -------- GUARDAR DIRECTAMENTE ------------
DIA0 <- "0006"
HORA0 <- "1805"
BD_TOT <- data.frame(fread(paste0(my_copy_to, "TOTALES04", DIA0, HORA0, ".txt"), skip = 1))[,1:15]
BD_TOT$ID_EDO_DIST <- GEN_ID_EDO_DIST(BD_TOT$ID_ESTADO, BD_TOT$ID_DISTRITO_FEDERAL)
BD_TOT$ID_EDO_DIST <- factor(BD_TOT$ID_EDO_DIST, levels = ID_EDO_DIST)
BD_TOT <- BD_TOT[order(BD_TOT$ID_EDO_DIST),]
BD_TOT$ID <- id_unico_casilla(BD_TOT)
# INFO RE-MUESTREO BOOTSTRAP
INFO_BOOT_IMPUT <- data.frame(ID_EDO_DIST = ID_EDO_DIST,
Nh = as.numeric(Nh),
nh = as.numeric(table(BD_TOT$ID_EDO_DIST)))
{cat("El tamaño de muestra completo es de ", sum(INFO_BOOT_IMPUT$nh), "casillas\n")}
# PRE CARGA
my_dir <- "~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/ESTIMACION/"
DIA0 <- "0006"
HORA0 <- "1805"
source(paste0(my_dir, "1extras_precarga.r"))
source(paste0(my_dir, "1extras_precarga.r"),encoding = "UTF-8")
# PRE CARGA
my_dir <- "~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/ESTIMACION/"
DIA0 <- "0006"
HORA0 <- "1805"
source(paste0(my_dir, "1extras_precarga.r"),encoding = "UTF-8")
# 1- LEE REMESA
my_ffiles <- list.files("~/Actuaría/GitHub/R_Actuarial/Conteo Rápido (INE)/6. Imputación/ESTIMA_2021/REMESAS_UNICOM/")[-c(1:5, 53:89)]
vect_HORA <- substr(my_ffiles, 14, 17)
my_ffiles
DIA <- "0006"
kkk <- length(vect_HORA)
kkk
jj=1
HORA <- vect_HORA[jj]
HORA
res_lee <- lee_remesa_merge(BD_TOT, my_copy_from, my_copy_to, DIA, HORA,
my_variables, ID_EDO_DIST)
res_lee
{cat("\014")
cat("En la remesa de las", HORA, "tenemos información de \n")
cat("casillas:", res_lee$n, "\n")
cat("estratos:", sum(res_lee$nh > 0), "\n")}
# 2- IMPUTACIÓN
pred <- crea_pred_mat3(res_lee$REMESA)
pred
View(pred)
res_lee$REMESA
View(/Volumes/GoogleDrive/Mi unidad/CR2021/1ERWIN/PAPER)
View(res_lee$REMESA)
REMESA = res_lee$REMESA
pred <- make.predictorMatrix(REMESA)
pred
?make.predictorMatrix
pred
pred <- 0*pred
pred
#pred[,"ID_EDO_DIST"] <- 0
#pred[,c("TIPO_SECCION", "LISTA_NOMINAL", "MORENA")] <- 1
pred[,c("LISTA_NOMINAL", "MORENA", "PAN", "PRI", "PRD")] <- 1
pred
dim(pred)
?mice
