#¿Cómo obtener un éxito?
n<-23
M<-sample(x = 1:365,   #Del vector 1:365
size = n,    #Toma una muestra de tamaño n
replace = T) #Con reemplazo.
length(Éxitos)
#Probabilidad estimada:
Éxitos/Ensayos
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
Ensayos<-100
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
View(M)
dim(M)
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
length(Éxitos)
#Probabilidad estimada:
Éxitos/Ensayos
sum(Éxitos)/Ensayos
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
no.Éxitos/Ensayos
set.seed(21)
Ensayos<-100
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#View(M) ; dim(M)
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
length(Éxitos)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
no.Éxitos/Ensayos
set.seed(21)
Ensayos<-100
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#View(M) ; dim(M)
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
length(Éxitos)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
no.Éxitos/Ensayos
Ensayos<-100000
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#View(M) ; dim(M)
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
length(Éxitos)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
no.Éxitos/Ensayos
set.seed(21)
Ensayos<-100000
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#View(M) ; dim(M)
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
length(Éxitos)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
no.Éxitos/Ensayos
2*365
#En la teoría, para "n" personas, la probabilidad estimada es:
1-exp(-n*(n-1)/(2*365))
set.seed(6)
Ensayos<-100000
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#View(M) ; dim(M)
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
length(Éxitos)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
no.Éxitos/Ensayos
#En la teoría, para "n" personas, la probabilidad estimada es:
1-exp(-n*(n-1)/(2*365))
Ensayos<-100000
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#View(M) ; dim(M)
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
length(Éxitos)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
no.Éxitos/Ensayos
#En la teoría, para "n" personas, la probabilidad estimada es:
1-exp(-n*(n-1)/(2*365))
n<-365
set.seed(6)
n<-365 ; Ensayos<-100000
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
length(Éxitos)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
no.Éxitos/Ensayos
#En la teoría, para "n" personas, la probabilidad estimada es:
1-exp(-n*(n-1)/(2*365))
n<-10 ; Ensayos<-100000
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
length(Éxitos)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
no.Éxitos/Ensayos
#En la teoría, para "n" personas, la probabilidad estimada es:
1-exp(-n*(n-1)/(2*365))
set.seed(6)
n<-7 ; Ensayos<-100000
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#View(M) ; dim(M)
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
#length(Éxitos)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
no.Éxitos/Ensayos
#En la teoría, para "n" personas, la probabilidad estimada es:
1-exp(-n*(n-1)/(2*365))
dim(M)
experimento<-as.function(n=100,Ensayos=100000){
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
return(no.Éxitos/Ensayos)
}
experimento<-function(n=100,Ensayos=100000){
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
return(no.Éxitos/Ensayos)
}
prob.estimada<-function(n=100,Ensayos=100000){
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
return(no.Éxitos/Ensayos)
}
?seq
#A diferentes valores de n, vamos el resultado:
n<-seq(from = 5, #Del 5
to = 50,  #al 50
by = 5)   #De 5 en 5.
n
Estimados<-sapply(X = n, #Al vector "n" , entrada a entrada
FUN = prob.estimada) #aplicale la función dada.
Estimados
prob.estimada<-function(n=100,Ensayos=10000){
M<-replicate(n = Ensayos, #Realiza "Ensayos" veces, la siguiente expresión:
expr = sample(x = 1:365, size = n, replace = T))
#Realizamos la prueba por columnas:
prueba<-apply(X = M,                #A la matriz M,
MARGIN = 2,           #aplica por columnas,
FUN = anyDuplicated)  #la función anyDuplicated.
#Entrada a entrada, si hubo éxito, marca 1, si no, marca 0.
Éxitos<-ifelse(test = prueba!=0,yes = 1,no = 0)
#Probabilidad estimada:
no.Éxitos<-sum(Éxitos)
return(no.Éxitos/Ensayos)
}
#A diferentes valores de n, vamos el resultado:
n<-seq(from = 5, #Del 5
to = 50,  #al 50
by = 5)   #De 5 en 5.
Estimados<-sapply(X = n, #Al vector "n" , entrada a entrada
FUN = prob.estimada) #aplicale la función dada.
set.seed(21)
Estimados<-sapply(X = n, #Al vector "n" , entrada a entrada
FUN = prob.estimada) #aplicale la función dada.
2*365
prob.aprox<-function(n){
return(1-exp(-n*(n-1)/(730)))
}
Aprox.Reales<-sapply(X = n, #Al vector "n" , entrada a entrada
FUN = prob.aprox) #aplicale la función dada.
Aprox.Reales
Resultados<-data.frame(n,Aprox.Reales,Estimados)
Resultados
prob.estimada(n)
n
#Grafica:
plot(Aprox.Reales~Estimados, #Aprox. Vs. Estimados
type="l",  #Pon una línea,
col="red", #Color rojo,
lwd=2)     #con ancho 2.
#Agrega la siguiente línea:
abline(b = 1)
#Agrega la siguiente línea:
abline(b = 1,col="blue",lwd=1)
#Agrega la siguiente línea:
abline(b = 1,col="blue",lwd=10)
#Agrega la siguiente línea:
abline(a=0,b = 1,col="blue",lwd=10)
#Grafica:
plot(Aprox.Reales~Estimados, #Aprox. Vs. Estimados
main="Comparación", #Pon como título,
type="l",  #Pon una línea,
col="red", #Color rojo,
lwd=2)     #con ancho 2.
#Agrega la siguiente línea:
abline(a=0,b = 1,col="blue",lwd=1)
#Grafica:
plot(Aprox.Reales~Estimados, #Aprox. Vs. Estimados
main="Comparación", #Pon como título,
type="l",  #Pon una línea,
col="red", #Color rojo,
lwd=4)     #con ancho 2.
#Agrega la siguiente línea:
abline(a=0,b = 1,col="blue",lwd=1)
#Agrega la siguiente línea:
abline(a=0,b = 1,col="blue",lwd=2)
#Grafica:
plot(Aprox.Reales~Estimados, #Aprox. Vs. Estimados
main="Comparación", #Pon como título,
type="l",  #Pon una línea,
col="red", #Color rojo,
lwd=2)     #con ancho 2.
#Agrega la siguiente línea:
abline(a=0,b = 1,col="blue",lwd=2)
#Grafica:
plot(Aprox.Reales~Estimados, #Aprox. Vs. Estimados
main="Comparación", #Pon como título,
col="red", #Color rojo,
lwd=2)     #con ancho 2.
#Agrega la siguiente línea:
abline(a=0,b = 1,col="blue",lwd=2)
?Sys.time()
Sys.time()
?system.time
#¿Cuánto tardó en generar todo?
system.time(expr =  sapply(X = n, FUN = prob.estimada))
#¿Cuánto tardó en generar todo?
system.time(expr =  sapply(X = n, FUN = prob.estimada))
set.seed(21)
system.time(expr =  sapply(X = n, FUN = prob.estimada))
#Mostramos los resultados:
Resultados<-data.frame(n,Aprox.Reales,Estimados)
Resultados
n<-180 ; set.seed(21)
M<-sample(x = 1:365,   #Del vector 1:365
size = n,    #Toma una muestra de tamaño n
replace = T) #Con reemplazo.
id<-anyDuplicated(x = M) ; id
#¿En dónde salió el número que se duplicó primero?
which(M==M[id])
#Creemos una lista vacía que sea Dra.Michelle
Dra.Michelle<-list()
Dra.Michelle$Nombre<-"Michelle"
Dra.Michelle
#Creemos una lista vacía que sea Dra.Itzel
Dra.Michelle$Nombre<-"Itzel"
Dra.Michelle$Especialidad<-c("Fisioterapia","Pediatría")
Dra.Michelle$Sueldo<-47000
Dra.Michelle
Dra.Michelle$Pacientes<-list(Dany,Karla)
Dany<-list(nombre="Daniela", edad=20, escuelas=c("Prepa 6","Ciencias Políticas"))
Sara<-list(nombre="Sara", edad=22, escuelas=c("Prepa 7","Ciencias"))
Karla<-list(nombre="Sara", edad=22, escuelas=c("CCH Sur","Química"))
Dra.Michelle$Pacientes<-list(Dany,Karla)
Dra.Michelle
Dra.Michelle$Pacientes<-c(Dany,Karla)
Dra.Michelle
Dra.Michelle$Pacientes$nombre
Dra.Michelle$Pacientes<-list(Dany,Karla)
Dra.Michelle$Pacientes
Dra.Michelle$Pacientes<-list(Paciente1=Dany,Paciente2=Karla)
Dra.Michelle$Pacientes$Paciente1
Dra.Michelle
#Creemos una listas de personas
Dany<-list(nombre="Daniela", edad=20, escuelas=c("Prepa 6","Ciencias Políticas"))
Sara<-list(nombre="Sara", edad=22, escuelas=c("Prepa 7","Ciencias"))
Karla<-list(nombre="Sara", edad=22, escuelas=c("CCH Sur","Química"))
#Creemos una lista vacía que sea Dra.Michelle
Dra.Michelle<-list()
#Pongamos algunas características de la Dra.Michelle
Dra.Michelle$Nombre<-"Michelle"
Dra.Michelle$Especialidad<-c("Neuróloga","Cardióloga")
Dra.Michelle$Sueldo<-45000
Dra.Michelle$Pacientes<-list(Paciente1=Dany,Paciente2=Karla)
Dra.Michelle
#Creemos una lista vacía que sea Dra.Itzel
Dra.Itzel$Nombre<-"Itzel"
Dra.Itzel$Especialidad<-c("Fisioterapia","Pediatría")
Dra.Itzel$Sueldo<-47000
Dra.Itzel$Pacientes<-list(Paciente1=Sara)
Dra.Itzel
#Creemos una lista vacía que sea Dra.Itzel
Dra.Itzel<-list()
Dra.Itzel$Nombre<-"Itzel"
Dra.Itzel$Especialidad<-c("Fisioterapia","Pediatría")
Dra.Itzel$Sueldo<-47000
Dra.Itzel$Pacientes<-list(Paciente1=Sara)
Dra.Itzel
#Por último, podemos hacer una lista del hospital
Hospital<-list(Dr.1=Dra.Michelle, Dr.2=Dra.Itzel)
Hospital
Hospital$Dr.1$Nombre
Hospital$Dr.1$Especialidad
Hospital$Dr.2
Hospital
#install.packages("learningr")
library(learningr)
#Fijamos la base de datos como sigue:
attach(obama_vs_mccain)
#¿Cuántos mínimos tiene cada uno? (No es tal cual una consulta a la base)
sum(pmin(Obama,McCain)==Obama)
sum(pmin(Obama,McCain)==McCain)
22+29
#¿En cuáles estados Obama pierde?
State[pmin(Obama,McCain)==Obama]
#¿En cuáles estados Obama Gana?
State[pmax(Obama,McCain)==Obama]
State[pmin(Obama,McCain)==McCain]
#d) ¿Cuál es el nombre del personaje más alto?
max <- max(starwars$height)
#¿Qué pasó?
max <- max(na.omit(starwars$height))
##Ejercicio Querys y estadística.##
library(dplyr)
#d) ¿Cuál es el nombre del personaje más alto?
max <- max(starwars$height)
max
#¿Qué pasó?
max <- max(na.omit(starwars$height))
starwars$name[starwars$height == max]
starwars$name[starwars$height == max]
#¿Qué pasó?
starwars$name[starwars$height == max & !is.na(starwars$height)]
#Opción 2
na.omit(starwars$name[starwars$height == max])
#m) ¿Las variables peso y altura están correlacionadas? Muestra su gráfico
#¿Hay datos atípicos? ¿Cuáles? Elimina los datos atípicos y muestra el gráfico de peso contra altura.
#¿Cómo se ve afectada la correlación? realiza un modelo de regresión lineal simple e interpreta
#Comprueba los supuestos del modelo.
alturas <- starwars$height[!is.na(starwars$height) & !is.na(starwars$mass)]
pesos <- starwars$mass[!is.na(starwars$height) & !is.na(starwars$mass)]
nombres <- starwars$name[!is.na(starwars$height) & !is.na(starwars$mass)]
base <- data.frame(nombres,alturas, pesos)
View(base)
#Tienen poca correlación, probablemente por el dato atípico Jabba.
cor(base[,2:3])
plot(base[,2:3],col="blue",pch=17)
id<-identify(base[,2:3],labels = base[,1])
?include_graphics
??include_graphics
#Gráfico sin datos atípicos
plot(base[-id,2:3],col="blue",pch=17)
#¿Cómo se ve afectada la correlación?
cor(base[-id,2:3])
library(corrplot)
corrplot(cor(base[,2:3]),method = "square")
corrplot(cor(base[-id,2:3]),method = "square")
#Ajusta un modelo de regresión e interpreta:
reg <- lm(base[-id,3]~base[-id,2])
#Coeficientes
reg$coefficients
base[1,]
base[1,]$alturas*reg$coefficients[2]+reg$coefficients[1]
#agregamos las líneas:
abline(reg$coefficients,col="red",lwd=2)
#Gráfico sin datos atípicos
plot(base[-id,2:3],col="blue",pch=17)
#agregamos las líneas:
abline(reg$coefficients,col="red",lwd=2)
#Media igual a cero
mean(reg$residuals)
#No hay autocorrelación en los residuales
library(lmtest)
dwtest(reg) #No rechazamos H0 al 95% de confianza
#Las variables explicativas y los residuales no están correlacionados
cor.test(base$alturas[-id],reg$residuals) #No rechazamos H0 al 95% de confianza
#Comprobación automática
library(gvlma)
gvlma(reg)
install.packages("gvlma")
#Comprobación automática
library(gvlma)
gvlma(reg)
gvlma(reg)
par(mfrow=c(2,2))
plot(reg)
#agregamos las líneas:
plot(base[-id,2:3],col="blue",pch=17)
par(mfrow=c(2,2))
plot(reg)
#reajustamos el modelo
reg <- lm(base[-c(id,4,20,53,5,18,50),3]~base[-c(id,4,20,53,5,18,50),2])
gvlma(reg)
plot(reg)
gvlma(reg)
par(mfrow=c(2,2))
plot(reg)
#Terminamos
par(mfrow=c(1,1))
#Hay gráficas más elegantes
library(ggplot2)
ggplot(base, aes(x=alturas, y=pesos)) +
geom_point(colour="darkgreen")+
geom_smooth(method=lm)
#Sin datos atípicos
ggplot(base[-id,], aes(x=alturas, y=pesos)) +
geom_point(colour="darkgreen")+
geom_smooth(method=lm)
#Sin datos atípicos
ggplot(base[-id,], aes(x=alturas, y=pesos))
geom_point(colour="darkgreen")
geom_smooth(method=lm)
#Sin datos atípicos
ggplot(base[-id,], aes(x=alturas, y=pesos),geom_point(colour="darkgreen"))
ggplot(base, aes(x=alturas, y=pesos)) +
geom_point(colour="darkgreen")+
geom_smooth(method=lm)
#Sin datos atípicos
ggplot(base[-id,], aes(x=alturas, y=pesos)) +
geom_point(colour="darkgreen")+
geom_smooth(method=lm)
ggplot(base[-id,], aes(x=alturas, y=pesos),geom_point(colour="darkgreen"),geom_smooth(method=lm))
#Sin datos atípicos
ggplot(base[-id,], aes(x=alturas, y=pesos)) +
geom_point(colour="darkgreen")+
geom_smooth(method=lm)
#Gráfico normal
plot(base[-id,2:3],col="blue",pch=17)
reg <- lm(base[-id,3]~base[-id,2])
abline(reg$coefficients,col="red",lwd=2)
#Gráfico elegante
ggplot(base[-id,], aes(x=alturas, y=pesos)) +
geom_point(colour="darkgreen")+
geom_smooth(method=lm)
setwd("~/Actuaría/AMAT/R básico/Edgar/Bases de Datos/ENESS2013")
library(foreign)
Eness2013<-read.dbf("eness2013.dbf", as.is = FALSE)
#¿Están las variables de interés?
c("EDA","FAC_ENESS") %in% names(Eness2013)
test<-data.frame(Eness2013$EDA, Eness2013$FAC_ENESS)
barplot(table(Eness2013$EDA),
col = rainbow(150),
main = "Frecuencias") #Tenemos muchos individuos de las mismas edades.
