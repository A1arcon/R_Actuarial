lambda = 1
set.seed(2020)
x<- rpois(1000,1)
x
summary(x)
mean(x)
var(x)
arreglo = array(c("a","b","c","d","e","f","g","h","i"),
dim = c(3,3,5))
arreglo
arreglo[3,3,]
arreglo
arreglo = array(c("a","b","c","d","e","f","g","h","i"),
dim = c(3,3,5))
arreglo
arreglo[,2,]
arreglo
arreglo <- array(c("a","c","g","i"),
dim = c(2,2,5))
arreglo
M <- matrix(c(1, 2, 3, 4, 2, 5, 6, 7, 3, 6, 7, 8, 4, 7, 8, 9), nrow = 4, ncol = 4, byrow = TRUE)
M
eigen(M)
E<-eigen(M)
# b) El objeto E es una lista
mode(E)
names(E)
A%*%t(A)
v<- values
A<- vectors
names(E)
A%*%t(A)
round(A%*%t(A))
# Edgar ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Aquí faltó el código para crear a "v" y a "A"
v <- E$values
A <- E$vectors
names(E)
A%*%t(A)
round(A%*%t(A))
vv<- E$values
AA<- E$vectors
AA%*%t(AA)
round(AA%*%t(AA))
(A%*%L)%*%t(A)
(AA%*%L)%*%t(AA)
round((AA%*%L)%*%t(AA))
# a.
set.seed(6)
# Edgar ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lo que sí, es que parece que falta el código para la creación de L
L <- diag(v)
(A%*%L)%*%t(A)
round((A%*%L)%*%t(A))
(AA%*%L)%*%t(AA)
round((AA%*%L)%*%t(AA))
# a.
set.seed(6)
sim <-sample(x=1:5,
size = 1000,
replace = TRUE,
prob = c(0.2, 0.4, 0.2, 0.1, 0.1))
sim
# b.
table(sim)
f_sim<-factor(sim)
# Codificación de los números a letras
levels(f_sim)<-c("A","B","C","D","F")
f_sim
o_sim <- ordered(f_sim)
o_sim
sort(f_sim, decreasing = FALSE)
# Codificación de los números a letras
levels(f_sim)<-c("A","B","C","D","F")
f_sim
o_sim <- ordered(f_sim)
o_sim
sort(f_sim, decreasing = FALSE)
levels(f_sim) <- c("A"="[10,9)", "B" = "[9,8)", "C" = "[8,7)", "D" = "[7,6)", "F" = "[6,0]")
f_sim
summary(f_sim)
o_sim
nombre<-c("Marcela", "Camila", "Clara", " Manuel")
apellido<-c("Ordorica", "Ordorica", "Arango", "Ordorica")
estatura<- c("1.70", "1.75", "1.79", "1.70")
edad<-c(28,30,55,59)
ciudad_origen<- c("México", "México", "Bogotá", "México")
familia_tipo<-data.frame(nombre, apellido, estatura, edad,ciudad_origen)
familia_tipo
getwd()
set.seed(2020)
Simula = mean ( rpois(1000,5) )
Simula
arreglo = array(c("a","b","c","d","e","f","g","h","i"),
dim = c(3,3,5))
letra_i = arreglo[3,3,]
set.seed(2020)
Simula = mean ( rpois(1000,5) )
Simula
arreglo = array(c("a","b","c","d","e","f","g","h","i"),
dim = c(3,3,5))
letra_i = arreglo[3,3,]
arreglo[,,1]
arreglo[,2,]
arreglo[c(1,3),c(1,3),2]
# Considera la siguiente matriz:
M = matrix(c(1, 2, 3, 4,2, 5, 6, 7,3, 6, 7, 8,4, 7, 8, 9),nrow = 4,ncol = 4,byrow = TRUE)
E = eigen(M)
mode(E)
class(E)
nombres = names(E)
v=nombres[1]
A=nombres[2]
Mat = matrix(c(1:16),nrow = 4,ncol = 4,byrow = TRUE) %% t(matrix(c(1:16),nrow = 4,ncol = 4,byrow = TRUE))
Mat
Lambda = diag( matrix(c(1:16),nrow = 4,ncol = 4,byrow = TRUE))
Mat2 = matrix(c(1:16),nrow = 4,ncol = 4,byrow = TRUE)        %%
diag( matrix(c(1:16),nrow = 4,ncol = 4,byrow = TRUE)) %%
t(matrix(c(1:16),nrow = 4,ncol = 4,byrow = TRUE))
Mat2
set.seed(6)
sim = sample(letras,1000,prob=c(0.2,0.4,0.2,0.1,0.1),replace=T)
table(sim)
set.seed(6)
sim = sample(letras,1000,prob=c(0.2,0.4,0.2,0.1,0.1),replace=T)
Familia=data.frame( Nombre = c("Francisco","Vianeth","Matias","Christian","Celia") ,
Apellido = c("Melchor Martinez","Hernandez Espinoza","Melchor Hernandez","Melchor Martinez","Martinez Ortiz"),
Edad = as.numeric (c("33","30","1","27","51")),
Estatura = as.numeric (c("1.70","1.50",".50","1.80","1.60")),
Ciudad = c("Edo Mex")
)
Familia
#Ejercicio 1
?rpois() #Investigar la distribución en R
# La esperanza de la Poisson es Lambda
set.seed(2020)#Definimos la semilla 2020
l <- 5 #Definimos lambda l = 5
x <- rpois(1000,l)#Distribución Poisson con 1000 simulaciones y parametro lambda
x#Da el resultado de las simulaciones
mean(x)#Obtiene el promedio de las simulaciones
#Ejercicio 2
arreglo <- array(c("a","b","c","d","e","f","g","h","i"), dim = c(3,3,5))
arreglo#Llama al arreglo que se definió
arreglo[3,3,]#Se obtienen las "i"
arreglo[,,1]#Se obtiene la matriz solicitada
arreglo[,2,]#Se obtiene la matriz con las letras "d", "e" y "f"
###Ejercicio 3
M <- matrix(c(1,2,3,4,2,5,6,7,3,6,7,8,4,7,8,9), nrow = 4, ncol = 4, byrow = T)#Se define la matriz de la tarea
M#Arroja la Matriz
E <- eigen(M)#Se aplica la función Eigen en la matriz M
E#Arroja el objeto E (Eigen)
mode(E)#Tipo de dato E él cual es una lista
names(E)#Matriz Eigen arroja valores y vectores
v <- E$values#Se declara "v" como los valores
A <- E$vectors#Se declara "A" como los vectores
AT <- t(A)#AT se declara como la transpuesta de A
P <- A%*%AT#P es el producto de A * AT
Lambda <- round(P)#Lambda es la matriz diagonal
c <- A%*%Lambda#"c" es el producto de A * Lambda
d <- c%*%AT#"d" es el producto de A * Lambda * AT
d#"d" es la matriz diagonal
d
mode(E)#Tipo de dato E él cual es una lista
names(E)#Matriz Eigen arroja valores y vectores
v <- E$values#Se declara "v" como los valores
A <- E$vectors#Se declara "A" como los vectores
###Ejercicio 3
M <- matrix(c(1,2,3,4,2,5,6,7,3,6,7,8,4,7,8,9), nrow = 4, ncol = 4, byrow = T)#Se define la matriz de la tarea
M#Arroja la Matriz
E <- eigen(M)#Se aplica la función Eigen en la matriz M
E#Arroja el objeto E (Eigen)
mode(E)#Tipo de dato E él cual es una lista
names(E)#Matriz Eigen arroja valores y vectores
v <- E$values#Se declara "v" como los valores
A <- E$vectors#Se declara "A" como los vectores
AT <- t(A)#AT se declara como la transpuesta de A
P <- A%*%AT#P es el producto de A * AT
P
# Edgar ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lambda debía ser la matriz diagonal construída a partir de v.
Lambda <- diag(v)
c <- A%*%Lambda#"c" es el producto de A * Lambda
d <- c%*%AT#"d" es el producto de A * Lambda * AT
d#"d" es la matriz diagonal
####Ejercicio 4
set.seed(6)#Se guarda la semilla "6"
sim <- sample(c("A","B","C","D","F"), size = 1000, replace = T, prob = c(0.2, 0.4, 0.2, 0.1, 0.1))
table(sim)#Cuenta el número de veces en la simulación que se obtuvo la letra
sim_info <- factor(sim)
f_sim <- ordered(sim_info, levels = c("F", "D", "C", "B","A"))
f_sim
levels(f_sim) <- c("A" = "[10,9)", "B" = "[9,8)", "C" = "[8,7)", "D" = "[7,6)", "F" = "[6,0]")
f_sim
summary(f_sim)#Se obtienen los mismos valores que en el inciso b)
#####Ejercicio 5
#Miembros de la familia Stark 'Game of Thrones'
nombre <- c("Eddard","Catelyn","Robb","Sansa","Arya", "Bran","Rickon")
apellido <- c("Stark","Stark","Stark","Stark","Stark","Stark","Stark")
#####Ejercicio 5
#Miembros de la familia Stark 'Game of Thrones'
nombre <- c("Eddard","Catelyn","Robb","Sansa","Arya", "Bran","Rickon")
apellido <- c("Stark","Stark","Stark","Stark","Stark","Stark","Stark")
edad <- c(35,34,14,11,9,7,3)
estatura <- c(1.80,1.75,1.70,1.65,1.30, 1.10,1.00)
lugar <- c("Winterfell", "Riverrun","Winterfell","Winterfell","Winterfell","Winterfell","Winterfell")
familia <- data.frame(Nombre = nombre, Apellido = apellido, Edad = edad, Estatura = estatura, Ciudad_Origen = lugar)
familia
M <- matrix(c(1,1,2,4),2,2)
M <- matrix(c(1,1,2,4),2,2)
M
eigen(M)
E<-eigen(M)
E$vectors
A<-E$vectors
A%*%t(A)
names(E)
A<-E[[2]]
sim <- sample(x = c("A","B","C"),size = 100,replace = TRUE)
sim
arreglo <- array(1:4,dim = c(2,2,3))
arreglo
arreglo[2,1,]
n=57287
cond<-any(n%%(2:(n-1))==0)
ifelse(test = cond,"No es primo","Es primo")
n=312102319
cond<-any(n%%(2:(n-1))==0)
ifelse(test = cond,"No es primo","Es primo")
# Guardemos este df
library(xlsx)
write.xlsx(x = df,file = "C:/Users/alarc/OneDrive/Escritorio/Fechas.xlsx")
datos5<-read_excel(path = "Acero.xlsx",sheet="Pagos")
# El siguiente documento tiene varias páginas.
library(readxl)
datos5<-read_excel(path = "Acero.xlsx",sheet="Pagos")
##Forma 1##
datos<-read.table("C:/Users/alarc/OneDrive/Documents/Actuaría/Docencia/AMAT/R básico/Edgar/Bases de Datos/Carga de Datos/Acero.txt",
header=T)
View(datos)
##Forma 2
setwd("~/Actuaría/Docencia/AMAT/R básico/Edgar/Bases de Datos/Carga de Datos")
list.files()
datos<-read.table("Acero.txt",header=TRUE)
View(datos)
datos
datos
##Forma 2
ruta <- "Acero.txt"
datos<-read.table(ruta,header=T)
View(datos)
##Forma 1
#LE QUITAMOS LA RUTA DEL FINAL
ruta <- "C:/Users/alarc/OneDrive/Documents/Actuaría/Docencia/AMAT/R básico/Edgar/Bases de Datos/Carga de Datos/"
datos<-read.table(paste(ruta,"Acero.txt", sep = ""),header=T)
View(datos)
#Bases de datos en diversos formatos:
datos1<-read.csv("Acero.csv")
View(datos1)
#Las bases de datos siguientes son las mismas,
#aunque se importaron de diferente manera.
all(datos == datos1)
any(datos != datos1)
#La siguiente es una base de datos un poco diferente:
#write.table(x = datos1,file = "acero.prn")
datos2<-read.delim("Acero.prn",header=T,sep = "")
View(datos2)
dim(datos2)
dim(datos1)
#Hay otra manera bastante interesante:
datos3<-read.delim("clipboard")
# El siguiente documento tiene varias páginas.
library(readxl)
datos4<-read_excel(path = "Acero.xlsx") #Por default se toma la primera página.
View(datos4)
#Veamos cómo trae los datos:
apply(X = datos4,MARGIN = 2,FUN = class)
datos5<-read_excel(path = "Acero.xlsx",sheet="Pagos")
View(datos5)
#sapply aplica a una lista una función
sapply(datos5, class)
