?optimize
optimize(f = fz,interval = c(-1,1),maximum = T)
optimize(f = fz,interval = c(4,6),maximum = T)
#Operadores lógicos
y <- c(TRUE, FALSE)
1+1
12+5
12+5
12+5
12+5
source("~/.active-rstudio-document", encoding = 'UTF-8')
"Hola"
TRUE
FALSE
True
as.numeric("Hola")
?NA
as.numeric("7")
as.character(TRUE)
as.numeric("Hola")
"1" + "2"
paste("1","2")
paste0("1","2")
paste("1","2",sep = "-")
"1" + "2"
TRUE + TRUE
TRUE + TRUE + FALSE
?rnorm
help(rnorm)
rnorm
help(rnorm)
?rnorm
?rbinom()
?rnbinom()
?rpois
?pbirthday()
qbirthday(0.5)
pbirthday(50)
X <- rnorm(10000)
set.seed(6)
X <- rnorm(10000)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10)
runif(1)
set.seed(10000000)
runif(1)
set.seed(10000000)
runif(1)
set.seed(10000000)
runif(1)
set.seed(10000000)
runif(1)
set.seed(10000000)
runif(1)
set.seed(10000000)
runif(1)
set.seed(1)
runif(1)
set.seed(1)
runif(1)
set.seed(1)
runif(1)
set.seed(2)
runif(1)
set.seed(6)
X <- rnorm(10000)
X
MASS::truehist(X)
library(MASS)
truehist(X)
1-pnorm(0)
1-pnorm(0)
1-pnorm(0) # Probabilidad Exacta: "Teórica"
X
X
X>0
sum(X>0)
sum(X>0)/10000
1-pnorm(0) # Probabilidad Exacta: "Teórica"
sum(X>0)/10000 # Probabilidad  Empírica: "Por simulaciones"
pnorm(1)
sum(X<=1)/10000
sum(X<=1)
X<=1
I <- as.numeric(X<=1)
I
I
pnorm(1)
mean(I) # aprox p
sum(X<=1)/10000
# Hola
10 + 5
# Es un comentario
10
hist(rnorm(1000))
hist(rnorm(1000))
hist(rnorm(1000))
x = 10
library(plotly)    # Para hacer los gráficos
library(dplyr)     # Manipulación de datos
library(readr)     # Lectura de archivos
library(neuralnet) # Para crear redes neuronales
library(keras)     # Motor para DNN (Deep Neural Network)
library(tidymodels)# Para manejo de modelos
tidymodels_prefer()
# Primero veamos la fórmula del cono
setwd("~/Actuaría/Docencia/AMAT/R Aplicado/_ Datos e Instalaciones/_Edgar Package_")
source("mis_funciones.R",encoding = "UTF-8")
# Gráfico 3D
superficie3d(x.from=-1,x.to=1,y.from=-1,y.to=1,
fxy=function(x,y){sqrt(x^2+y^2)},
x.lab="x",y.lab="y",z.lab="z",
main="Cono",epsilon=0.01,
sombra=TRUE,leyenda=TRUE)
# Gráfico 3D
superficie3d(x.from=-1,x.to=1,y.from=-1,y.to=1,
fxy=function(x,y){sqrt(x^2+y^2)},
x.lab="x",y.lab="y",z.lab="z",
main="Cono",epsilon=0.01,
sombra=TRUE,leyenda=TRUE)
source("mis_funciones.R",encoding = "UTF-8")
# Gráfico 3D
superficie3d(x.from=-1,x.to=1,y.from=-1,y.to=1,
fxy=function(x,y){sqrt(x^2+y^2)},
x.lab="x",y.lab="y",z.lab="z",
main="Cono",epsilon=0.01,
sombra=TRUE,leyenda=TRUE)
# Vamos a simular puntos dentro de un cono
set.seed(123)
data.frame(X=runif(500,-1,1),
Y=runif(500,-1,1)) %>%
mutate(Z = sqrt(X^2+Y^2)) -> cono
# Vemos los datos
View(cono)
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(colorscale='Viridis'))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE),
colorscale="Viridis")
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis"))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = X, y = Y, z = Z,
marker = list(color = Z,
showscale = TRUE,
colorscale="Viridis"))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig <- plot_ly(cono, x = X, y = Y, z = Z,
marker = list(color = Z,
showscale = TRUE,
colorscale="Viridis"))
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis"))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis",
opacity=0.8))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis",
opacity=0.6))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis",
opacity=0.6,
size=1))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis",
opacity=0.6,
size=2))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis",
opacity=0.6,
size=3))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
#colorscale="Viridis",
opacity=0.6,
size=3))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis",
opacity=0.6,
size=3))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
# Gráfico 3D
superficie3d(x.from=-1,x.to=1,y.from=-1,y.to=1,
fxy=function(x,y){sqrt(x^2+y^2)},
x.lab="x",y.lab="y",z.lab="z",
main="Cono",epsilon=0.01,
sombra=TRUE,leyenda=TRUE)
RN1 <- ?neuralnet()
?neuralnet()
RN <- neuralnet(formula = Z~.,
data = cono,
hidden = c(3,2))
plot(RN,col.hidden = 'darkgreen',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'lightblue')
# Podemos ver un grafico de la red neuronal
plot(RN,
col.hidden = 'red',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'lightblue')
# Podemos ver un grafico de la red neuronal
plot(RN,
col.hidden = 'red',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'lightblue')
# Podemos ver un grafico de la red neuronal
plot(RN,
col.hidden = 'red',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'yellow')
# Podemos ver un grafico de la red neuronal
plot(RN,
col.hidden = 'red',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'yellow')
# Podemos ver un grafico de la red neuronal
plot(RN,
col.hidden = 'red',
col.hidden.synapse = 'darkblue',
show.weights = F,
information = F,
fill = 'yellow')
# Podemos ver un grafico de la red neuronal
plot(RN,
col.hidden = 'red',
col.hidden.synapse = 'darkgreen',
show.weights = F,
information = F,
fill = 'yellow')
RN
RN$response
RN$response
resultados <- data.frame(X=cono$X,Y=cono$Y,Z=RN$response)
# Los graficamos
fig <- plot_ly(resultados, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis",
opacity=0.6,
size=3))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
# Los graficamos
fig <- plot_ly(resultados, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
#colorscale="Viridis",
opacity=0.6,
size=3))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
# Métricas de desempeño
real <- cono$Z
estimado <- RN$response
# Mean Absolute Error
(MAE=mean(abs(real,estimado)))
(MAE=mean(abs(real-estimado)))
RN$result.matrix
RN$covariate
RN$model.list$response
RN$linear.output
RN$net.result
# Métricas de desempeño
real <- cono$Z
estimado <- RN$net.result
# Mean Absolute Error
(MAE=mean(abs(real-estimado)))
RN$net.result
estimado <- RN$net.result %>% as.vector
# Mean Absolute Error
(MAE=mean(abs(real-estimado)))
RN$net.result %>% as.vector
estimado <- RN$net.result %>% unlist()
estimado
# Métricas de desempeño
real <- cono$Z
estimado <- RN$net.result %>% unlist()
# Mean Absolute Error
(MAE=mean(abs(real-estimado)))
# Mean Absolute Percentage Error
(MAPE= (real-estimado)/real %>% mean(abs()))
(MAPE= (real-estimado)/real %>% abs() %>%  mean())
(real-estimado)/real %>% abs()
(real-estimado)/real %>% abs() %>%  mean()
(real-estimado)/real
(real-estimado)/real %>% abs()
# Mean Absolute Percentage Error
(MAPE= ((real-estimado)/real) %>% abs() %>%  mean())
# Mean Absolute Error
(MAE=mean(abs(real-estimado)))
# Mean Absolute Percentage Error
(MAPE= ((real-estimado)/real) %>% abs() %>%  mean())
(RMSE = (real-estimado) %>% mean() %>% sqrt())
R2 = sum((real-mean(real))^2)/sum((estimado-mean(real))^2)
R2
R2 = sum((estimado-mean(real))^2)/sum((real-mean(real))^2)
R2
(R2 = sum((estimado-mean(real))^2)/sum((real-mean(real))^2))
cor(estimado,real)
# R-squared
(R2 = sum((estimado-mean(real))^2)/sum((real-mean(real))^2))
cov(estimado,real)
# R-squared
(R2 = sum((estimado-mean(real))^2)/sum((real-mean(real))^2))
cor(estimado,real)
cov(estimado,real)/(var(real))
# R-squared
(R2 = sum((estimado-mean(real))^2)/sum((real-mean(real))^2))
cov(estimado,real)/(var(real))
N = nrow(cono)
N = nrow(cono)
k = ncol(cono)-1
(Adj_R2 = 1 - (N-1)/(N-k-1)*(1-R2))
# Adj. R-Squared
N = nrow(cono)
k = ncol(cono)-1
(Adj_R2 = 1 - (N-1)/(N-k-1)*(1-R2))
# R-squared
(R2 = sum((estimado-mean(real))^2)/sum((real-mean(real))^2))
# Adj. R-Squared
N = nrow(cono)
k = ncol(cono)-1
(Adj_R2 = 1 - (N-1)/(N-k-1)*(1-R2))
# Resultados
resultados <- data.frame(X=cono$X,Y=cono$Y,Z=estimado)
# Los graficamos
fig <- plot_ly(resultados, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
#colorscale="Viridis",
opacity=0.6,
size=3))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
?add_trace()
library(rgl)
install.packages("rgl")
# Más gráficos
# http://www.sthda.com/english/wiki/amazing-interactive-3d-scatter-plots-r-software-and-data-visualization
library(rgl)
?scatter3d()
library(car)
scatter3d(resultados)
scatter3d(x = resultados$X,y = resultados$Y,z = resultados$Z)
scatter3d(x = resultados$X,y = resultados$Y,z = resultados$Z)
scatter3d(x = resultados$X,y = resultados$Y,z = resultados$Z,fit = "smooth")
scatter3d(x = resultados$X,y = resultados$Z,z = resultados$Y,fit = "smooth")
scatter3d(x = resultados$X,y = resultados$Z,z = resultados$Y,fit = "smooth")
scatter3d(x = cono$X,y = cono$Z,z = cono$Y,fit = "smooth")
# Los graficamos
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis",
opacity=0.6,
size=3))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
# Librerías
library(plotly)    # Para hacer los gráficos
library(dplyr)     # Manipulación de datos
library(readr)     # Lectura de archivos
library(neuralnet) # Para crear redes neuronales
library(keras)     # Motor para DNN (Deep Neural Network)
library(tidymodels)# Para manejo de modelos
tidymodels_prefer()
# Los graficamos
fig <- plot_ly(cono, x = ~X, y = ~Y, z = ~Z,
marker = list(color = ~Z,
showscale = TRUE,
colorscale="Viridis",
opacity=0.6,
size=3))
fig <- fig %>% add_markers()
fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Eje X'),
yaxis = list(title = 'Eje Y'),
zaxis = list(title = 'Eje Z')))
fig
