# Regla 3.
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(125, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
sliderInput(inputId = "Número",
label = "Selecciona un Tamaño de muestra",
value = 500,min = 10,max = 1000,step = 10),
numericInput(inputId = "Lambda",
label = "Escoge el parámetro Lambda",
value = 1,min = 0.01,max = 10,step = 0.1),
plotOutput(outputId = "gráfica")
)
server <- function(input,output){
library(latex2exp)
#Regla 1.         #Regla 2.
output$gráfica <- renderPlot({
# Regla 3.
título <- input$Selección
set.seed(20)
# Regla 3.
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(125, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
sliderInput(inputId = "Número",
label = "Selecciona un Tamaño de muestra",
value = 2500,min = 10,max = 5000,step = 10),
numericInput(inputId = "Lambda",
label = "Escoge el parámetro Lambda",
value = 1,min = 0.01,max = 10,step = 0.01),
plotOutput(outputId = "gráfica")
)
server <- function(input,output){
library(latex2exp)
#Regla 1.         #Regla 2.
output$gráfica <- renderPlot({
# Regla 3.
título <- input$Selección
set.seed(20)
# Regla 3.
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(125, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
ui <- fluidPage(
sliderInput(inputId = "Número",
label = "Selecciona un Tamaño de muestra",
value = 10,min = 10,max = 10000,step = 10),
numericInput(inputId = "Lambda",
label = "Escoge el parámetro Lambda",
value = 1,min = 0.01,max = 10,step = 0.01),
plotOutput(outputId = "gráfica")
)
server <- function(input,output){
library(latex2exp)
#Regla 1.         #Regla 2.
output$gráfica <- renderPlot({
# Regla 3.
título <- input$Selección
set.seed(20)
# Regla 3.
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(125, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
server <- function(input,output){
library(latex2exp)
#Regla 1.         #Regla 2.
output$gráfica <- renderPlot({
# Regla 3.
título <- input$Selección
set.seed(20)
# Regla 3.
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(300 start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
server <- function(input,output){
library(latex2exp)
#Regla 1.         #Regla 2.
output$gráfica <- renderPlot({
# Regla 3.
título <- input$Selección
set.seed(20)
# Regla 3.
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(300, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
server <- function(input,output){
library(latex2exp)
#Regla 1.         #Regla 2.
output$gráfica <- renderPlot({
# Regla 3.
título <- input$Selección
set.seed(20)
# Regla 3.
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(50, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
server <- function(input,output){
library(latex2exp)
#Regla 1.         #Regla 2.
output$gráfica <- renderPlot({
# Regla 3.
título <- input$Selección
set.seed(20)
# Regla 3.
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(25, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
datos<-rexp(n=10000,rate = 1/2)
setwd("~/Actuaría/Docencia/AMAT/Cápsulas/Estimador máximo verosímil")
set.seed(20)
datos<-rexp(n=10000,rate = 1/2)
# Creamos los datos con los que vamos a trabajar:
set.seed(20)
X<-rexp(n=10000,rate = 1/2)
MASS::truehist(X,
col=rainbow(25, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
# Creamos los datos con los que vamos a trabajar:
set.seed(20)
X<-rexp(n=10000,rate = 1/2)
# Este es el gráfico de nuestros datos.
MASS::truehist(X,
col=rainbow(25, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
# Agregamos los puntos en el histograma.
points(X,rep(0,length(X)),pch=3,col="orange")
# Programamos la log-verosimilitud
log.verosimilitud<-function(lambda){
sum(log(dexp(x = X,rate = lambda)))
}
log.verosimilitud(1)
log.verosimilitud(0)
log.verosimilitud(0)
# Y vamos a maximizarla numéricamente:
lambda.gorro<-optim(1,                       #Punto inicial
log_verosimilitud,       #Función a maximizar.
control=list(fnscale=-1))
lambda.gorro<-pracma::optim(par = 1,fn = log.verosimilitud)
lambda.gorro<-optimise(f = log.verosimilitud,
interval = c(0,1))
lambda.gorro
# Y vamos a maximizarla numéricamente:
lambda.gorro<-optimise(f = log.verosimilitud, # Función a maximizar.
interval = c(0,1),     # ¿Dónde creo que está?
maximum = TRUE)        # Vamos a maximizar.
lambda.gorro<-lambda.gorro$maximum
lambda.gorro
lambda.gorro
# Que cuando lo graficamos se ve como:
f <- function(x){
dexp(x,lambda.gorro)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
1/mean(X)
# Entonces el valor es:
lambda.gorro
# Shiny App ---------------------------------------------------------------
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "Número",
label = "Selecciona un Tamaño de muestra",
value = 10,min = 10,max = 10000,step = 10),
numericInput(inputId = "Lambda",
label = "Escoge el parámetro Lambda",
value = 1,min = 0.01,max = 10,step = 0.01),
plotOutput(outputId = "gráfica")
)
server <- function(input,output){
library(latex2exp)
output$gráfica <- renderPlot({
título <- input$Selección
set.seed(20)
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(25, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
# Shiny App ---------------------------------------------------------------
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "Número",
label = "Selecciona un Tamaño de muestra",
value = 10,min = 10,max = 10000,step = 10),
numericInput(inputId = "Lambda",
label = "Escoge el parámetro Lambda",
value = 1,min = 0.01,max = 10,step = 0.01),
plotOutput(outputId = "gráfica")
)
server <- function(input,output){
library(latex2exp)
output$gráfica <- renderPlot({
título <- input$Selección
set.seed(20)
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(25, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
# Shiny App ---------------------------------------------------------------
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "Número",
label = "Selecciona un Tamaño de muestra",
value = 10,min = 10,max = 10000,step = 10),
numericInput(inputId = "Lambda",
label = "Escoge el parámetro Lambda",
value = 1,min = 0.01,max = 10,step = 0.01),
plotOutput(outputId = "gráfica")
)
server <- function(input,output){
library(latex2exp)
output$gráfica <- renderPlot({
título <- input$Selección
set.seed(20)
X<-rexp(input$Número,rate=1/2)
MASS::truehist(X,
col=rainbow(25, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
points(X,rep(0,length(X)),pch=3,col="orange")
f <- function(x){
dexp(x,input$Lambda)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
})
}
shinyApp(ui = ui,server = server)
# Creamos los datos con los que vamos a trabajar:
set.seed(20)
X<-rexp(n=10000,rate = 1/2)
X
# Este es el gráfico de nuestros datos.
MASS::truehist(X,
col=rainbow(25, start = 0.5, 1),
main = TeX("Histograma de $X\\sim Exp(\\lambda)$"))
abline(h=0,v=0,col="blue",lwd=2)
# Agregamos los puntos en el histograma.
points(X,rep(0,length(X)),pch=3,col="orange")
# Programamos la log-verosimilitud
log.verosimilitud<-function(lambda){
sum(log(dexp(x = X,rate = lambda)))
}
lambda.gorro<-optimise(f = log.verosimilitud, # Función a maximizar.
interval = c(0,1),     # ¿Dónde creo que está?
maximum = TRUE)        # Vamos a maximizar.
lambda.gorro<-lambda.gorro$maximum
lambda.gorro<-optimise(f = log.verosimilitud, # Función a maximizar.
interval = c(0,1),     # ¿Dónde creo que está?
maximum = TRUE)        # Vamos a maximizar.
lambda.gorro<-lambda.gorro$maximum
lambda.gorro
lambda.gorro
# Que cuando lo graficamos se ve como:
f <- function(x){
dexp(x,lambda.gorro)
}
plot(f,from=0,to=20,add=TRUE,col="red",lwd=2)
1/2
# Librerías
library(plotrix)
library(grid)
# Shiny App ---------------------------------------------------------------
library(shiny)
ui <- fluidPage(
headerPanel('Integración Monte Carlo'),
sidebarPanel(
sliderInput(inputId = "Número",
label = "Selecciona un Tamaño de muestra",
value = 10,min = 10,max = 1000,step = 10),
sliderInput(inputId = "a1a2",
label = "Selecciona un valor para a1 y a2",
value = 0,min = 0,max = 1,step = 0.1),
sliderInput(inputId = "b1b2",
label = "Selecciona un valor para b1 y b2",
value = 3,min = 3,max = 4,step = 0.1)),
mainPanel(
plotOutput(outputId = "gráfica")
)
)
server <- function(input,output){
output$gráfica <- renderPlot({
#Primero el gráfico de la figura:
X<-c(-0.5,4) ; Y<- c(-0.5,4)
plot(X,Y,type="n",asp=1)
abline(h=0,v=0,col="red",lwd=2)
draw.circle(2,2,1,border = "darkgreen",lwd=3)
text(2,2,labels = "F",col="darkgreen")
# Podemos encerrar este círculo en el recuadro (1,3)x(1,3)
a1 = input$a1a2 ; b1 = input$b1b2 # X~Unif(a1,b1)
a2 = input$a1a2 ; b2 = input$b1b2 # X~Unif(a2,b3)
rect(a1,a2,b1,b2,border = "darkblue",lwd=3)
text(3,3,labels = "R",col="darkblue")
# Realizamos el paso 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set.seed(4) ; n = input$Número
X <- runif(n,a1,b1)
Y <- runif(n,a2,b2)
points(X,Y,pch=4)
# Realizamos el paso 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Éxito <- (X-2)^2+(Y-2)^2<=1
points(X[Éxito],Y[Éxito],pch=4,col="purple")
})
}
shinyApp(ui = ui,server = server)
#Primero el gráfico de la figura:
X<-c(-0.5,4) ; Y<- c(-0.5,4)
plot(X,Y,type="n",asp=1)
abline(h=0,v=0,col="red",lwd=2)
draw.circle(2,2,1,border = "darkgreen",lwd=3)
text(2,2,labels = "F",col="darkgreen")
# Podemos encerrar este círculo en el recuadro (1,3)x(1,3)
a1 = 1 ; b1 = 4 # X~Unif(a1,b1)
a2 = 1 ; b2 = 4 # X~Unif(a2,b3)
rect(a1,a2,b1,b2,border = "darkblue",lwd=3)
text(3,3,labels = "R",col="darkblue")
# Realizamos el paso 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set.seed(4) ; n = 2000
X <- runif(n,a1,b1)
Y <- runif(n,a2,b2)
points(X,Y,pch=4)
# Realizamos el paso 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Podemos determinar los puntos en F a partir de la ecuación cónica
## de una circunferencia.
Éxito <- (X-2)^2+(Y-2)^2<=1
points(X[Éxito],Y[Éxito],pch=4,col="purple")
(b1-a1)
(b2-a2)
Área.R <- (b1-a1)*(b2-a2)
Área.R
Área.R * (sum(Éxito)/n)
pi
Monte.Carlo <- function(n,g,a,b){
#    n  := Tamaño de muestra que se tomará.
#    g  := función a integrar.
# (a,b) := intervalo de integración.
# Esta función asume la existencia de la función Promedio_n()
# Paso 1: Simulamos de la uniforme(a,b)
U <- runif(n,a,b)
# Paso 2: Aplicamos el cálculo g(U):
g.U <- sapply(X = U,FUN = g)
# Paso 3: Calculamos el Promedio hasta n
ab.g.U.n<-(b-a)*cumstats::cummean(g.U)
# Calculamos la integral de forma numérica:
int.g <- pracma::integral(g,a,b)
# Vamos a hacer un par de gráficos:
par(mfrow=c(2,1))
# Ahora, primero mostraremos qué tal va la convergencia.
plot(ab.g.U.n, type = "l",
xlab = paste0("Número de realizaciones del experimento (",n,")"),
ylab="Convergencia",col = "darkblue", lwd = 2,
main = latex2exp::TeX("$(b-a)\\bar{g(U)} \\rightarrow (b-a)E(g(U)) = \\int_{a}^{b} g(t) dt$"))
abline(h = int.g, col = "orangered", lwd = 3)
grid()
# Ahora mostraremos cómo hemos rellenado el área bajo la curva:
# Lo haremos con puntos
plot(U,sapply(X = U,FUN = g),col="orange",type="h",pch=4,
main="Ocupación de la curva",
ylab="g")
grid()
# Esta es la curva
curve(g,from=a,to=b,lwd=2,col="blue",add=TRUE)
abline(h=0,v=0,col="red",lwd=3)
# Regresamos los resultados:
vector <- c(`Monte Carlo`=(b-a)*mean(g.U),
Numérico=int.g,
Error=abs((b-a)*mean(g.U)-int.g))
return(vector)
}
## Tamaño de muestra
n <- 100
# Función g:
g=function(x){
cos(x)
}
# Intervalo
a = 0 ; b = 3*pi/2
set.seed(6)
Monte.Carlo(n,g,a,b)
# Shiny App ---------------------------------------------------------------
library(shiny)
ui <- fluidPage(
headerPanel('Integración Monte Carlo'),
sidebarPanel(
sliderInput(inputId = "Número",
label = "Selecciona un Tamaño de muestra",
value = 10,min = 10,max = 600,step = 10),
sliderInput(inputId = "a",
label = "Selecciona un valor para 'a'",
value = -1.5,min = -3,max = 0,step = 0.1),
sliderInput(inputId = "b",
label = "Selecciona un valor para 'b'",
value = 1.5,min = 0,max = 3,step = 0.1)
),
mainPanel(
plotOutput(outputId = "gráfica")
)
)
server <- function(input,output){
output$gráfica <- renderPlot({
# Tamaño de muestra
n = input$Número
# Función g:
g=function(x){
x^2
}
# Intervalo
a = input$a ; b = input$b
# Usamos la función en cuestión:
set.seed(29)
Monte.Carlo(n,g,a,b)
})
}
shinyApp(ui = ui,server = server)
