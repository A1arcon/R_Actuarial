# Ahora vamos a mostrar la región de la recta que estamos cubriendo.
# Gráfico 2
# Lo haremos con puntos
plot(U,sapply(X = U,FUN = g),col="orange",type="h",pch=4,
main="Ocupación de la curva",
ylab="g")
grid()
# Esta es la curva
curve(g,from=a,to=b,lwd=2,col="blue",add=TRUE)
abline(h=0,v=0,col="red",lwd=2)
# Regresa los resultados
vector <- c(Monte.Carlo = mean(ab.g.U),
Numérico = int.g,
Error = abs(mean(ab.g.U)-int.g))
return(vector)
}
# 6.
a = 0 ; b = 366
n = 500
set.seed(2012)
Monte.Carlo(n,g6,a,b)
Monte.Carlo <- function(n,g,a,b){
# n := Tamaño de muestra que se tomará.
# g := función a integrar.
# (a,b) := Intervalo de integración.
# Esta función va a asumir la existencia de la función Promedio_n()
# Simulamos de la uniforme(a,b)
U <- runif(n,a,b)
# Aplicamos el cáculo (b-a)*g(U)
ab.g.U <- (b-a)*sapply(U,g)
# Calculos el promedio hasta n
ab.g.U.n <- Promedio_n(ab.g.U)
# Vamos a hacer la integral numérica
int.g <- integrate(g,a,b)$value
# Vamos a hacer un par de gráficos
par(mfrow=c(2,1))
# Ahora. primero vamos a mostrar qué tal va la convergencia.
# Gráfico 1
plot(ab.g.U.n, type = "l",
xlab = paste0("Número de realizaciones del experimento (",n,")"),
ylab="Convergencia",col = "darkblue", lwd = 2,
main = TeX("$(b-a)\\bar{g(U)} \\rightarrow (b-a)E(g(U)) = \\int_{a}^{b} g(t) dt$"))
abline(h = int.g, col = "orangered", lwd = 3)
grid()
# Ahora vamos a mostrar la región de la recta que estamos cubriendo.
# Gráfico 2
# Lo haremos con puntos
plot(U,sapply(X = U,FUN = g),col="orange",type="h",pch=4,
main="Ocupación de la curva",
ylab="g")
grid()
# Esta es la curva
curve(g,from=a,to=b,lwd=2,col="blue",add=TRUE)
abline(h=0,v=0,col="red",lwd=2)
# Regresa los resultados
vector <- c(Monte.Carlo = mean(ab.g.U),
Numérico = int.g,
Error = abs(mean(ab.g.U)-int.g))
return(vector)
}
# 6.
a = 0 ; b = 366
n = 500
set.seed(2012)
Monte.Carlo(n,g6,a,b)
pracma::integral(g,a,b)
pracma::integral(g6,a,b)
Monte.Carlo <- function(n,g,a,b){
# n := Tamaño de muestra que se tomará.
# g := función a integrar.
# (a,b) := Intervalo de integración.
# Esta función va a asumir la existencia de la función Promedio_n()
# Simulamos de la uniforme(a,b)
U <- runif(n,a,b)
# Aplicamos el cáculo (b-a)*g(U)
ab.g.U <- (b-a)*sapply(U,g)
# Calculos el promedio hasta n
ab.g.U.n <- Promedio_n(ab.g.U)
# Vamos a hacer la integral numérica
int.g <- pracma::integral(g,a,b)
# Vamos a hacer un par de gráficos
par(mfrow=c(2,1))
# Ahora. primero vamos a mostrar qué tal va la convergencia.
# Gráfico 1
plot(ab.g.U.n, type = "l",
xlab = paste0("Número de realizaciones del experimento (",n,")"),
ylab="Convergencia",col = "darkblue", lwd = 2,
main = TeX("$(b-a)\\bar{g(U)} \\rightarrow (b-a)E(g(U)) = \\int_{a}^{b} g(t) dt$"))
abline(h = int.g, col = "orangered", lwd = 3)
grid()
# Ahora vamos a mostrar la región de la recta que estamos cubriendo.
# Gráfico 2
# Lo haremos con puntos
plot(U,sapply(X = U,FUN = g),col="orange",type="h",pch=4,
main="Ocupación de la curva",
ylab="g")
grid()
# Esta es la curva
curve(g,from=a,to=b,lwd=2,col="blue",add=TRUE)
abline(h=0,v=0,col="red",lwd=2)
# Regresa los resultados
vector <- c(Monte.Carlo = mean(ab.g.U),
Numérico = int.g,
Error = abs(mean(ab.g.U)-int.g))
return(vector)
}
# 6.
a = 0 ; b = 366
n = 500
set.seed(2012)
Monte.Carlo(n,g6,a,b)
warnings()
# 4.
a = -5 ; b = 5
n = 500
set.seed(4)
Monte.Carlo(n,g4,a,b)
#4.
g4 <- function(x){
pmax(10*x,x^2)
}
plot(g4,from=-5,to=5)
#5.
g5 <- function(x){
ifelse(0<x&x<=5,1,ifelse(5<x&x<=7,x,ifelse(7<x&x<=10,10-x,0)))
}
plot(g5,from=0,to=10)
#6.
g6 <- function(x){
sapply(x,pbirthday)
}
plot(g5,from=0,to=366)
# Creamos la función que hace eso
Promedio_n <- function(datos){
# Una función auxiliar que obtiene promedios hasta "k"-ésima entrada.
aux <- function(k,datos){
return(mean(datos[1:k]))
}
# Esa función la vamos a aplicar a lo largo del vector datos.
return(sapply(X = 1:length(datos),FUN = aux,datos=datos))
}
library(latex2exp)
Monte.Carlo <- function(n,g,a,b){
# n := Tamaño de muestra que se tomará.
# g := función a integrar.
# (a,b) := Intervalo de integración.
# Esta función va a asumir la existencia de la función Promedio_n()
# Simulamos de la uniforme(a,b)
U <- runif(n,a,b)
# Aplicamos el cáculo (b-a)*g(U)
ab.g.U <- (b-a)*sapply(U,g)
# Calculos el promedio hasta n
ab.g.U.n <- Promedio_n(ab.g.U)
# Vamos a hacer la integral numérica
int.g <- pracma::integral(g,a,b)
# Vamos a hacer un par de gráficos
par(mfrow=c(2,1))
# Ahora. primero vamos a mostrar qué tal va la convergencia.
# Gráfico 1
plot(ab.g.U.n, type = "l",
xlab = paste0("Número de realizaciones del experimento (",n,")"),
ylab="Convergencia",col = "darkblue", lwd = 2,
main = TeX("$(b-a)\\bar{g(U)} \\rightarrow (b-a)E(g(U)) = \\int_{a}^{b} g(t) dt$"))
abline(h = int.g, col = "orangered", lwd = 3)
grid()
# Ahora vamos a mostrar la región de la recta que estamos cubriendo.
# Gráfico 2
# Lo haremos con puntos
plot(U,sapply(X = U,FUN = g),col="orange",type="h",pch=4,
main="Ocupación de la curva",
ylab="g")
grid()
# Esta es la curva
curve(g,from=a,to=b,lwd=2,col="blue",add=TRUE)
abline(h=0,v=0,col="red",lwd=2)
# Regresa los resultados
vector <- c(Monte.Carlo = mean(ab.g.U),
Numérico = int.g,
Error = abs(mean(ab.g.U)-int.g))
return(vector)
}
# 4.
a = -5 ; b = 5
n = 500
set.seed(4)
Monte.Carlo(n,g4,a,b)
# 5.
a = 0 ; b = 10
n = 500
set.seed(2012)
Monte.Carlo(n,g5,a,b)
Monte.Carlo(n,g4,a,b)
# 4.
a = -5 ; b = 5
n = 500
set.seed(4)
Monte.Carlo(n,g4,a,b)
# 5.
a = 0 ; b = 10
n = 500
set.seed(2012)
Monte.Carlo(n,g5,a,b)
# 6.
a = 0 ; b = 366
n = 500
set.seed(2012)
Monte.Carlo(n,g6,a,b)
set.seed(10)
Monte.Carlo(n,g6,a,b)
set.seed(26)
U = runif(1000000)
Clases = 365 ; Coincidencias = 2
X <- sapply(X = U,FUN = qbirthday,classes=Clases,coincident=Coincidencias)
summary(X)
#6.
g6 <- function(x){
1-sapply(x,pbirthday)
}
plot(g5,from=0,to=366)
plot(g6,from=0,to=366)
# 6.
a = 0 ; b = 366
n = 500
set.seed(10)
Monte.Carlo(n,g6,a,b)
summary(X)
# 6.
a = 0 ; b = 366
n = 10000
set.seed(10)
Monte.Carlo(n,g6,a,b)
# 6.
a = 0 ; b = 366
n = 10000
set.seed(15)
Monte.Carlo(n,g6,a,b)
anualidad <- function(N,I,Due=FALSE,Pago=1){
# N:= Número de periodos.
# I := Tasa de interés efectiva al periodo.
# Due := ¿es anticipada?
# Pago := Pago que se hace por periodo.
# Vamos a filtrar un posible error que puede cometer el usuario
if(N < 0){
stop("La N está mal definida")
}if(I<0){
warning("Estás trabajando con un interés negativo")
}
# Vamos a ver un caso particular
if(I==0){
warning("Ingresaste una tasa de interés 0")
return(Pago*N)
}
# Variables auxiliares
V <- (1+I)^(-1) ; d <- I/(1+I)
# Ahora veamos si es anticipada o vencida:
if(Due){
return(Pago*(1-V^N)/d)
}else{
return(Pago*(1-V^N)/I)
}
}
anualidad(N=-10,I=0)
anualidad <- function(N,I,Due=FALSE,Pago=1){
# N:= Número de periodos.
# I := Tasa de interés efectiva al periodo.
# Due := ¿es anticipada?
# Pago := Pago que se hace por periodo.
# Vamos a filtrar un posible error que puede cometer el usuario
if(N < 0){
stop("La N está mal definida")
}if(I<0){
warning("Estás trabajando con un interés negativo")
}
# Vamos a ver un caso particular
if(I==0){
warning("Ingresaste una tasa de interés 0")
return(Pago*N)
}
# Variables auxiliares
V <- (1+I)^(-1) ; d <- I/(1+I)
# Ahora veamos si es anticipada o vencida:
if(Due){
return(Pago*(1-V^N)/d)
}else{
return(Pago*(1-V^N)/I)
}
}
anualidad <- function(N,I,Due=FALSE,Pago=1){
# N:= Número de periodos.
# I := Tasa de interés efectiva al periodo.
# Due := ¿es anticipada?
# Pago := Pago que se hace por periodo.
# Vamos a filtrar un posible error que puede cometer el usuario
if(N < 0){
stop("La N está mal definida")
}if(I<0){
warning("Estás trabajando con un interés negativo")
}
# Vamos a ver un caso particular
if(I==0){
warning("Ingresaste una tasa de interés 0")
return(Pago*N)
}
# Variables auxiliares
V <- (1+I)^(-1) ; d <- I/(1+I)
# Ahora veamos si es anticipada o vencida:
if(Due){
return(Pago*(1-V^N)/d)
}else{
return(Pago*(1-V^N)/I)
}
}
anualidad <- function(N,I,Due=FALSE,Pago=1){
# N:= Número de periodos.
# I := Tasa de interés efectiva al periodo.
# Due := ¿es anticipada?
# Pago := Pago que se hace por periodo.
# Vamos a filtrar un posible error que puede cometer el usuario
if(N < 0){
stop("La N está mal definida")
}
if(I<0){
warning("Estás trabajando con un interés negativo")
}
# Vamos a ver un caso particular
if(I==0){
warning("Ingresaste una tasa de interés 0")
return(Pago*N)
}
# Variables auxiliares
V <- (1+I)^(-1) ; d <- I/(1+I)
# Ahora veamos si es anticipada o vencida:
if(Due){
return(Pago*(1-V^N)/d)
}else{
return(Pago*(1-V^N)/I)
}
}
anualidad <- function(N,I,Due=FALSE,Pago=1){
# N:= Número de periodos.
# I := Tasa de interés efectiva al periodo.
# Due := ¿es anticipada?
# Pago := Pago que se hace por periodo.
# Vamos a filtrar un posible error que puede cometer el usuario
if(N < 0){
stop("La N está mal definida")
}
if(I<0){
warning("Estás trabajando con un interés negativo")
}
# Vamos a ver un caso particular
if(I==0){
warning("Ingresaste una tasa de interés 0")
return(Pago*N)
}
# Variables auxiliares
V <- (1+I)^(-1) ; d <- I/(1+I)
# Ahora veamos si es anticipada o vencida:
if(Due){
return(Pago*(1-V^N)/d)
}else{
return(Pago*(1-V^N)/I)
}
}
# Algunos ejemplos
anualidad(N=-10,I=0)
anualidad(N=10,I=0)
anualidad(N=10,I=-0.1)
anualidad(N=10,I=0.1)
anualidad(N=10,I=0)
library(FinancialMath)
# Ejemplo
N = 10 ; i = 0.02 ; P = 40
# Ejemplo
n = 10 ; i = 0.02 ; P = 40
anualidad(N = n)
anualidad(N = n,I=i,Pago = P)
anualidad(N = n,I=i,Pago = P,Due =  6)
as.logical(6)
as.logical(5)
as.logical(-1)
as.logical(0)
annuity.geo(n=n,p = P,i = i,k = 0,plot = TRUE)
anualidad(N = n,I=i,Pago = P)
anualidad(N = n,I=i,Pago = P)*(1+i)^n
n = 10 ; i = 0.02 ; P = 40
# Vencida
anualidad(N = n,I=i,Pago = P)
annuity.geo(n=n,p = P,i = i,k = 0,plot = TRUE)
# VF
anualidad(N = n,I=i,Pago = P)*(1+i)^n
# Anticipada
anualidad(N = n,I=i,Pago = P,Due = TRUE)
annuity.geo(n=n,p = P,i = i,k = 0,plot = TRUE,imm = FALSE)
anualidad(N = n,I=i,Pago = P)*(1+i)^n
anualidad(N = n,I=i,Pago = P,Due = TRUE)*(1+i)^n
# Gráfico de barras
?islands
barplot(islands,las=2,cex.names=0.65)
barplot(islands)
barplot(islands,
las=2, # Escribe los nombres de forma vertical
cex.names=0.65) # Reduce el tamaño de letra de los nombres
barplot(islands)
barplot(islands,
las=2, # Escribe los nombres de forma vertical
cex.names=0.65) # Reduce el tamaño de letra de los nombres
# Gráfico de caja:
boxplot(iris$Sepal.Length~iris$Species)
boxplot(iris$Sepal.Length)
boxplot(iris$Sepal.Length~iris$Species)
summary(women)
# Se puede ver con un resumen
?women
qqnorm(trees$Height)
trees$Height
qqplot(mtcars$drat,mtcars$wt)
mtcars$drat
qqnorm(rnorm(100))
abline(a = 0,b = 1,col="red",lwd=2)
qqnorm(rnorm(1000))
# agregamos una recta y = bx+a
abline(a = 0,b = 1,col="red",lwd=2)
boxplot(iris$Sepal.Length)
# Gráfico de caja:
boxplot(iris$Sepal.Length~iris$Species)
qqnorm(rnorm(1000))
# agregamos una recta y = bx+a
abline(a = 0,b = 1,col="red",lwd=2)
plot(mtcars)
plot(HairEyeColor)
class(mtcars)
class(HairEyeColor)
View(HairEyeColor)
HairEyeColor
# dame un gráfico general básico
plot(mtcars)
library(psych)
# Vamos a ver una versión un tanto más completa:
library(psych)
pairs.panels(iris,
bg=c("blue","red","yellow")[iris$Species], #Colores
pch=21, # Tipo de punto
cex.cor=1, #Tamaño de los números
lm=TRUE)  # ¿Pongo una regresión?
TRUE + TRUE
setwd("~/Actuaría/Docencia/AMAT/R Intermedio/_Datos/Banco")
Banco <- read.table("Bank.dat")
View(Banco)
View(Banco)
library(KernSmooth)
?bkde
reales <- Banco$V1[1:100]
reales
fkr <- bkde(reales)
fkr
plot(fkr,type="l",col="blue",main="Billetes reales V1")
# Ver comportamiento de los billetes falsos
falsos <- Banco$V1[101:200]
fkr <- bkde(falsos)
plot(fkr,type="l",col="blue",main="Billetes falsos V1")
# Ver comportamiento de los billetes reales
reales <- Banco$V1[1:100]
fkr <- bkde(reales)
plot(fkr,type="l",col="blue",main="Billetes reales V1")
# Ver comportamiento de los billetes falsos
falsos <- Banco$V1[101:200]
fkf <- bkde(falsos)
plot(fkr,type="l",col="red",main="Billetes falsos V1")
plot(fkf,type="l",col="red",main="Billetes falsos V1")
# Ver comportamiento de los billetes reales
reales <- Banco$V1[1:100]
fkr <- bkde(reales)
plot(fkr,type="l",col="blue",main="Billetes reales V1")
# Ver comportamiento de los billetes falsos
falsos <- Banco$V1[101:200]
fkf <- bkde(falsos)
plot(fkf,type="l",col="red",main="Billetes falsos V1")
plot(fkr,type="l",col="blue",main="Billetes reales V1")
plot(fkf,type="l",col="red",main="Billetes falsos V1")
plot(fkr,type="l",col="blue",main="Reales Vs. Falsos")
lines(fkf,col="red")
# Vamos a poner ambos gráficos
plot(fkr,type="l",col="blue",main="Reales Vs. Falsos",
ylim=c(0,1.5))
lines(fkf,col="red")
# Ver comportamiento de los billetes reales
reales <- Banco$V3[1:100]
fkr <- bkde(reales)
plot(fkr,type="l",col="blue",main="Billetes reales V1")
# Ver comportamiento de los billetes falsos
falsos <- Banco$V3[101:200]
fkf <- bkde(falsos)
plot(fkf,type="l",col="red",main="Billetes falsos V1")
# Vamos a poner ambos gráficos
plot(fkr,type="l",col="blue",main="Reales Vs. Falsos",
ylim=c(0,1.5))
lines(fkf,col="red")
# Función para fijarse en dos variables
?bkde2D
x <- cbind(Banco$V1,Banco$V2)
x <- cbind(Banco$V1,Banco$V2)
x
fd <- bkde2D(x)
fd <- bkde2D(x,bandwidth = c(0.2,0.2))
contour(fd$x1,fd$x2,fd$fhat)
library(plotly)
plot_ly(x = fd$x1,y = fd$x2,z = fd$fhat) %>% add_surface()
x <- cbind(Banco$V3,Banco$V6)
fd <- bkde2D(x,bandwidth = c(0.2,0.2))
contour(fd$x1,fd$x2,fd$fhat)
plot_ly(x = fd$x1,y = fd$x2,z = fd$fhat) %>% add_surface()
