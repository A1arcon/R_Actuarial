}
if (cond){                   # Si la condici?n de la funci?n es TRUE obtenemos la serie de Fibonacci hasta el n-?simo t?rmino
return(v)
} else {                     # Si la condici?n de la funci?n es FALSETRUE obtenemos el n-?simo t?rmino de la serie de Fibonacci
return(v[n])
}
}
fun2(10,TRUE)                  # Probamos la funci?n con n=10 y cond=TRUEm
fun2(10,FALSE)                 # Probamos la funci?n con n=10 y cond=FALSE
# EJERCICIO 4 -------------------------------------------------------------
library(dplyr)
operacion <- function(x,y,cond){
op <- list()
op$suma = x + y
op$resta = x - y
op$multipicacion = x * y
op$divicion = x/y
if (cond != TRUE){
return(op)} else{
return(c(op$suma,op$resta,op$multipicacion,op$divicion))
}
}
operacion(5,7,TRUE)
matriz <- function(n,m){
i = 1:n
j = 1:m
M <- matrix(M[i,j]<-i+j,nrow = n,ncol = m)
}
matriz()
matriz(10)
matriz(10,3)
# Ejercicio 1 -------------------------------------------------------------
Operaciones <- function(x, y, cond = TRUE) {
if (cond) {
# Si cond=TRUE, entonces se realizan las siguientes operaciones
Suma <- (x + y)
Resta <- (x - y)
Multiplicación <- (x * y)
División <- (x / y)
# Creamos el objeto Opción1 y guardamos en él un vector cuyas entradas
# son los resultados de las operaciones realizadas  anteriormente.
Opción1 <- c(Suma, Resta, Multiplicación, División)
# Asignamos el nombre de las entradas del vector Opción1
names(Opción1) <- c("Suma", "Resta", "Multiplicación", "División")
# Se muestra una lista que contiene al vector Opción1 y el nombre de cada
# una de sus entradas
return(list(Opción1))}
else{
# Si cond=FALSE, entonces se crea una lista
Opción2 <- list()
# Asignamos el nombre de las entradas de la lista Opción2 y la respectiva
# operación a realizar
Opción2$Suma <- sum(x, y)
Opción2$Resta <- (x - y)
Opción2$Multiplicación <- (x * y)
Opción2$División <- (x / y)
# Se muestra la lista Opción2, el nombre de cada entrada y los resultados
# de las operaciones realizadas anteriormente.
return(Opción2)}}
f(5, 8, FALSE)
dplyr::starwars
# 1.¿Cuál es el color de ojos más común entre los personajes?
# Creamos el objeto ColorOjos y guardamos la tabla que contenga a la columna
# $eye_color y una columna de frecuencia
ColorOjos <- table(starwars$eye_color)
function1 <- function( x , y , cond=TRUE) {
#R calcula las cuatro operaciones
op1 <- x + y
op2 <- x - y
op3 <- x * y
op4 <- x / y
#Construímos la lista con las funciones de las funciones
ls <- list(Suma  = op1,
Resta = op2,
Mult  = op3,
Div   = op4)
if(cond){
#si CON=TRUE, creamos el vector con funciones y lo agregamos a la lista
v <- c(op1, op2, op2, op4)
ls$vector <- v
#regresamos la lista
return(ls)
}else{
#si COND no es TRUE, solo regresamos la lista
return(ls)
}
}
#test
function1(4,5)
function1(7,4, cond = F)
function1(3,1)
#EJERCICIO 2
function2 <- function (n, m){
#creamsos la matriz vacia del tamaño deseado
matrix2 <- matrix( , nrow = n, ncol = m)
#el primer for es para los renglones
for (i in 1:n){
#el segundo for es para las columnas
for (j in 1:m) {
# a la entrada i,j le asignamos i + j
matrix2[i,j] <- i + j
}
}
#la función regresa la matriz
return(matrix2)
}
#test
function2(4,5)
function2(7,4)
function2(3,1)
fibonacci3 <- function(n) {
v <-c()
if (n==0) {
return(0)
} else if (n==1) {
v[1] <-1
return(v)
} else if (n==2) {
v[1] <-1
v[2] <-1
return(v)
} else {
v[1] <-1
v[2] <-1
for (i in 3:n){
v[i] <- v[i-1]+v[i-2]
}
return(v)
}
}
#test
fibonacci3(0)
fibonacci3(1)
fibonacci3(2)
fibonacci3(3)
fibonacci3(4)
fibonacci3(5)
fibonacci3(10)
fibonacci3(20)
fibonacci3(30)
#EJERCICIO 4
data4 <- dplyr::starwars
#Color de ojos mas comun. BROWN
tail(names(sort(table(data4$eye_color))),1)
#Promedio de altura de la especie humana 176.6452
mean(subset(data4, (data4$species == "Human"))$height, na.rm = T)
data4 %>%
filter(data4$height == max(data4$height, na.rm = TRUE)) %>%
select (name)
data4 %>%
filter(data4$mass == max(data4$mass, na.rm = TRUE)) %>%
select (name)
f <- function(x, y, cond) {        # Definimos la función deseada
if (missing(cond)) {             # Verificamos el comportamiento de la condición
cond <- TRUE                   # y le damos un comportamiento por defecto
}
l <- list()                      #Definimos la lista requerida, con las operaciones solicitadas
l[[1]] <- x + y
l[[2]] <- x - y
l[[3]] <- x * y
if (y == 0) {                    #Puse un mensaje sobre el comportamiento si es que tomamos y = 0
print(                         #puesto que no está bien definido la division entre 0
"Estás dividiendo entre 0. El resultado de este, se tomará como un comportamiento límite"
)
}
l[[4]] <- x / y
if (cond == TRUE) {
v <- c(l[[1]], l[[2]], l[[3]], l[[4]])
names(v) <- c("Suma", "Resta", "Multiplicación", "División")
return(v)
} else{
v <- c(l[[1]], l[[2]], l[[3]], l[[4]])
return(v)
}
}
f(5,8,F)
M <- function(n, m) {                 #Definimos a la función
# n := número de renglones
# m := número de columnas
N <- matrix(1:(n * m), n, m, T)     #Creamos una matríz de dimensión nxm
for (i in 1:n) {
for (j in 1:m) {                  #anidamos dos ciclos porque necesitamos recorrer/definir todsas las filas y columnas
N[i, j] <- i + j                #Esto para poder definir la selección de las posiciones y reasignar el valor de ellas
}                                 #como la suma requerida
}
return(N)                          #regresamos a la matriz cuya dimensión está dada por los parametros n,m
}                                    #y en cada entrada, está definida como la suma de los índices de su posicion
M()
Q
#funcion de fibonacci
rf <- function(n) {
if(n <= 1) {
return(n)
} else {
return(rf(n-1) + rf(n-2))
}
}
v <- c()
for (i in 1:12) {
v[i] <- rf(i)
}
v
n = 50
dmm <- function(n){
v <- c(1:n)
for (i in 1:n) {
v[i] <- rf(i)
}
return(v)
}
dmm(20)
rf(3)
n = 12
for (i in 0:n) {
v <-  c(0:n)
v[i]<- recurse_fibonacci(i)}
v
return(v)
v
f = function(x,y,cond=TRUE)
{
sum = x + y
res = x - y
mul = x * y
div = x / y
if (cond==TRUE) {
return(c(SUMA=sum,RESTA=res,MULTIPLICACION=mul,DIVISION=div))
}
else {return(list(sum,res,mul,div))}
}
f(1,2)
f(1,2,FALSE)
f = function(n,m)
{
M <- array(data = 0,
dim = c(n,m))
for (i in 1:n){
for (j in 1:m){
M[i,j] = i + j
}
}
return(M)
}
f(7,5)
f = function(n,cond=TRUE)
{
M <- array(data = 0,dim = c(n))
M[2] = 1
if (n>2){
for (j in 3:n){
M[j] = M[j-2] + M[j-1]
}
}
if (cond==TRUE) {
return(M)
}
else {return(M[n])}
}
f(10)
f(10,FALSE)
## Ejercicio 4
library(dplyr)
View(starwars)
f(10)
f1 <- function(x,y,z=TRUE){
res1 <- x+y
res2 <- x-y
res3 <- x*y
res4 <- x/y
res <- c(res1,res2,res3,res4)
if (z=="TRUE"){
etiq <- c("Suma", "Resta", "Multiplicación", "División")
names(res) <- etiq
}
return(res)
}
f2 <- function(n,m){
m1 <- matrix(1:n,nrow=n, ncol=m)
for (j in 1:m){
m1[,j] <- m1[,j]+j
}
return(m1)
}
f3 <- function(n,p1=TRUE){
suce <- c()
for(contador in 1:n){
if(contador==1){
suce[contador]<-1
}
if(contador==2){
suce[contador]<-1
}
if(contador>2){
suce[contador]=suce[contador-1]+suce[contador-2]
}
}
if (p1==TRUE){
print(suce[contador])
}else{
print(suce)
}
}
f3(10)
f3(10,p1 = F)
f <- function(x,y,cond=TRUE){
# La suma de x + y
op1 <- x+y
# La resta de x − y
op2 <- x - y
# La multiplicación de x * y
op3<- x* y
# La división de x / y
op4 <- x / y
ls <- list(suma  = op1,
resta = op2 , multiplicación = op3 , division = op4)
v <- c(Suma = op1 , Resta = op2, Multiplicación = op3, División = op4)
if(cond){
ls$vector <- v
return(ls)
}else{
return(ls)
}
}
f(2,2)
g$vector
g<-f(2,2,FALSE)
g
g$vector
n = 5
m = 4
h1 <- function(){
return(n + m +  10)
}
h1()
i <- n
j <- m
M[i,j]<-i+j
M
fib <- function(m) {
serie <- vector("numeric", length = m)
for (i in 1:m) {
serie[i] <- fib(i)
}
return(serie)
}
s_fib(20)
--------------------------
#n-ésimo
fib2 <- function(n) {
if (n == 1) {
return(0)
}
else if(n == 2) {
return(1)
}
else if(n > 2) {
return(fib(n - 1) + fib(n - 2))
}
}
fib2(2)
ls <- list(suma  = op1,
resta = op2 , multiplicaci?n = op3 , division = op4)
v <- c(Suma = op1 , Resta = op2, Multiplicaci?n = op3, Divisi?n = op4)
if(cond){
ls$vector <- v
return(ls)
}else{
return(ls)
}
f(2,2)
g$vector
sfib <- function(a) {
serie <- vector("numeric", length = a)
for (i in 1:a) {
serie[i] <- fib(i)
}
return(serie)
}
sfib(20)
fib2 <- function(n) {  # n-?simo
if (n == 1) {
return(0)
}
else if(n == 2) {
return(1)
}
else if(n > 2) {
return(fib(n - 1) + fib(n - 2))
}
}
operaciones<-function(x,y,cond){
z<-c(x+y,x-y,x/y)
if (y==0) {
print("Debes ingresar un valor 'y'<>0")
}else{
names(z)=c("suma","resta","división")
if (cond==TRUE) {
return(z)
}else{
w<-list(suma=x+y,resta=x-y,división=x/y)
return(w)
}
}
}
MATRIZ<-function(N,M){
NM=N*M
Z<-matrix(1:NM,nrow=N,ncol=M) #Crea la matriz de n renglones x m columnas
for (i in 1:N){   #Corre los valores de los renglones
for (j in 1:M){ #Corre los valores de las columnas
Z[i,j]=i+j #Establece la suma de las coordenadas (i,j) y la asigna a la entrada respectiva
}
}
return(Z)
}
fibo<-function(n,cond){
S=c(1:n)
S=S-1   #Para los casos donde n<3
if(n>2){
S[1]=0 #El primer término de la sucesión es 0
S[2]=1 #El segundo término de la sucesión es 1
for(i in 3:n){
S[i]=S[i-1]+S[i-2]
}
}
if (cond==TRUE) {
return(S)
}
if (cond==FALSE){
return(S[n])
}
}
fibo(10)
fibo(10,TRUE)
library(dplyr) #Carga la librería
f<-function(x,y,cond=TRUE){    ##Primero creamos la función solicitada con los tres argumentos solicitados
suma<-x+y     ##estamos creando la suma de x+y
resta<-x-y    ##estamos creando la resta de x-y
producto<-x*y ##estamos definiendo el producto
division<-x/y ##estamos definiendo la division
if (cond==TRUE) {            ##creamos la condicion de que si el argumento es TRUE, nos dará un vector con las entradas nombradas de acuerdo a la operacion.
return(c(SUMA=suma,RESTA=resta,PRODUCTO=producto,DIVISION=division))
}
else {return(list(suma,resta,producto,division))}  ##Por ultimo se crea el otro caso, que únicamente nos mostrará una lista con los resultados.
}
vector<-f(2,3,TRUE)  ##Hacemos una prueba, para generar el vector
class(vector)        ##Creo un vector, con argumentos numericos
lista<-f(2,3,FALSE)  ##Hacemos la prueba que generará sólo una lista
class(lista)         ##Comprobamos el tipo de dato
vector
lista
g<-function(n,m){             ##Creamos la función con los parametros que usaremos en su desarrollo
Matriz <- array(data = 0,   ##creamos un arreglo
dim = c(n,m))     ##definimos las dimensiones
for (i in 1:n){           ##llenamos, primero para cada fila de 1 a n, usando el indicador i
for(j in 1:m){          ##luego, para cada columna de 1 a m, usando el indicador j
Matriz[i,j]<-i+j      ##definimos entrada a entrada los valores de la matriz
}
}
return(Matriz)        ##Por ultimo regresamos como resultado nuestro arreglo
}
g(3,4)         ##Prueba de la funcion, parece que funciona
h<-function(n,cond=TRUE){            ##Creamos la funcion con los parametros solicitados
MatrizE3<-array(data=0,dim=c(n))   ##Crearemos una matriz que nos ayudara con la sucesion de finonacci, del tamaño del parametro n.
MatrizE3[2]<-1                     ## El segundo valor de la sucesion es 1
if(n>2){                           ##exploramos los casos para el cual la n es mayor a 2
for(j in 3:n){                   ##Empezamos en el tercer elemento de la sucesion.
MatrizE3[j] = MatrizE3[j-2] + MatrizE3[j-1] ##se desarrolla sobre el indicador j hasta el parametro n.
}
}
if (cond==TRUE) {                  ##Cuando la condicion es verdadera regresamos la matriz
return(MatrizE3)
}
else {
return(MatrizE3[n])              ##Cuando la condicion es falsa, solo enviamos el n-esimo valor
}
}
h(15)                                ##Prueba del caso verdadero
h(15,FALSE)                          ##Prueba del caso falso
library(dplyr) ##Cargamos la libreria origen
View(starwars) ##Podemos revisar el dataframe que viene en la libreria de Nombre Starwars
library(dplyr) ##Cargamos la libreria origen
View(starwars) ##Podemos revisar el dataframe que viene en la libreria de Nombre Starwars
#Ejercicio 1
r <- function(x,y){
return(x+y & x-y & x*y & x/y)
}
r(5,4)
r
##Ejercicio 2
M <- function(n,m){
return(matrix(c(1:(n+1)), nrow = n, ncol = m, F))
}
M(5,6)
### Ejercicio 3
Fibonacci <- function(n){                                         #Se define la función Fibonacci
if(n <= 1){
return(n)                                                     #Regresa n si el valor es 1
}else{
return(Fibonacci(n-1) + Fibonacci(n-2))                       #Si el valor es mayor a uno, regresa la sucesión de Fibonacci
}
}
nterms <- as.integer(readline(prompt = "¿Cuántos términos?"))    #opción a elegir cuántos términos de la sucesión quieres conocer
print("Porfavor ingresa un número entero mayor a 0")           #Si el número es 0, te pedirá que ingreses un número válido
}else{
print("Secuencia Fibonacci:")                                  #La función arrojará la secuencia Fibonacci con base en los datos que se hayan dado
for(i in 0:(nterms - 1)){
print(Fibonacci(i))
}
}
####Ejercicio 4
library(dplyr)
df <- dplyr::starwars               #Guardo el data.frame de StarWars en df
