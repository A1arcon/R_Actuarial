c("Ctrl+Shift+W","Cmd+Shift+W","Cierra todos los scripts"),
c("ctrl+3","Cmd+3","Abre la ventana de ayuda"),
c("Ctrl+4","Cmd+4","Muestra el historial"),
c("Ctrl+5","Cmd+5","Abre la ventana del folder de trabajo"),
c("Ctrl+6","Cmd+6","Muestra la ventana de gráficas"),
c("Ctrl+7","Cmd+7","Muestra los paquetes"),
c("Ctrl+8","Cmd+8","Muestra las variables almacenadas"),
c("Ctrl+Shift+K","Cmd+Shift+K","Crea un archivo con la paquetería Knit")
) -> datos
datos
View(datos)
View(t(datos))
install.packages("flextable")
# Extras
library(flextable)
names(datos)
datos <- t(datos)
names(datos)
datos
data.frame(
c("Ctrl+Shift+H", "Cmd+Shift+H", "Cambiar directorio de trabajo"),
c("Ctrl+Shift+N", "Cmd+Shift+N", "Nuevo script"),
c("Ctrl+Shift+R", "Cmd+Shift+R", "Inserta una nueva sección (script)"),
c("Ctrl+O", "Cmd+O", "Abrir un documento"),
c("Ctrl+S", "Cmd+S", "Guardar el script actual"),
c("Ctrl+Alt+S", "Cmd+Alt+S", "Guarda todos los scripts abiertos"),
c("Ctrl+L", "Cmd+L", "Limpia la consola"),
c("Ctrl+Enter","Cmd+Enter","Corre una línea del script"),
c("Ctrl+Shift+P","Cmd+Shift+P","vuelve a correr lineas anteriores"),
c("Ctrl+W","Cmd+W","Cierra el script actual"),
c("Ctrl+Shift+W","Cmd+Shift+W","Cierra todos los scripts"),
c("ctrl+3","Cmd+3","Abre la ventana de ayuda"),
c("Ctrl+4","Cmd+4","Muestra el historial"),
c("Ctrl+5","Cmd+5","Abre la ventana del folder de trabajo"),
c("Ctrl+6","Cmd+6","Muestra la ventana de gráficas"),
c("Ctrl+7","Cmd+7","Muestra los paquetes"),
c("Ctrl+8","Cmd+8","Muestra las variables almacenadas"),
c("Ctrl+Shift+K","Cmd+Shift+K","Crea un archivo con la paquetería Knit")
) -> datos
datos <- t(datos)
names(datos) <- c("Windows/Linux","Mac","Acción")
datos
View(datos)
data.frame(
c("Ctrl+Shift+H", "Cmd+Shift+H", "Cambiar directorio de trabajo"),
c("Ctrl+Shift+N", "Cmd+Shift+N", "Nuevo script"),
c("Ctrl+Shift+R", "Cmd+Shift+R", "Inserta una nueva sección (script)"),
c("Ctrl+O", "Cmd+O", "Abrir un documento"),
c("Ctrl+S", "Cmd+S", "Guardar el script actual"),
c("Ctrl+Alt+S", "Cmd+Alt+S", "Guarda todos los scripts abiertos"),
c("Ctrl+L", "Cmd+L", "Limpia la consola"),
c("Ctrl+Enter","Cmd+Enter","Corre una línea del script"),
c("Ctrl+Shift+P","Cmd+Shift+P","vuelve a correr lineas anteriores"),
c("Ctrl+W","Cmd+W","Cierra el script actual"),
c("Ctrl+Shift+W","Cmd+Shift+W","Cierra todos los scripts"),
c("ctrl+3","Cmd+3","Abre la ventana de ayuda"),
c("Ctrl+4","Cmd+4","Muestra el historial"),
c("Ctrl+5","Cmd+5","Abre la ventana del folder de trabajo"),
c("Ctrl+6","Cmd+6","Muestra la ventana de gráficas"),
c("Ctrl+7","Cmd+7","Muestra los paquetes"),
c("Ctrl+8","Cmd+8","Muestra las variables almacenadas"),
c("Ctrl+Shift+K","Cmd+Shift+K","Crea un archivo con la paquetería Knit")
) -> datos
datos <- t(datos)
colnames(datos) <- c("Windows/Linux","Mac","Acción")
rownames(datos) <- NULL
View(datos)
datos %>% regulartable()
is.data.frame(datos)
# Vamos a poner las configuraciones de los chunk en este caso
knitr::opts_chunk$set(echo = TRUE,warning = FALSE,message = FALSE,
out.width='85%',#fig.align='center',
error=FALSE,quietly=TRUE)
# Librerías para LaTeX
library(knitr)
library(kableExtra)
setwd("~/Actuaría/GitHub/R_Actuarial/Cheat-Sheet/R basic")
source("Funciones_RMD.R")
# Extras
library(flextable)
library(dplyr)
foto("1.png")
getwd()
foto("2.png")
foto("3.png")
foto("4.jpg")
foto("5.jpg")
foto("6.jpg")
foto("7.jpg")
data.frame(
c("Ctrl+Shift+H", "Cmd+Shift+H", "Cambiar directorio de trabajo"),
c("Ctrl+Shift+N", "Cmd+Shift+N", "Nuevo script"),
c("Ctrl+Shift+R", "Cmd+Shift+R", "Inserta una nueva sección (script)"),
c("Ctrl+O", "Cmd+O", "Abrir un documento"),
c("Ctrl+S", "Cmd+S", "Guardar el script actual"),
c("Ctrl+Alt+S", "Cmd+Alt+S", "Guarda todos los scripts abiertos"),
c("Ctrl+L", "Cmd+L", "Limpia la consola"),
c("Ctrl+Enter","Cmd+Enter","Corre una línea del script"),
c("Ctrl+Shift+P","Cmd+Shift+P","vuelve a correr lineas anteriores"),
c("Ctrl+W","Cmd+W","Cierra el script actual"),
c("Ctrl+Shift+W","Cmd+Shift+W","Cierra todos los scripts"),
c("ctrl+3","Cmd+3","Abre la ventana de ayuda"),
c("Ctrl+4","Cmd+4","Muestra el historial"),
c("Ctrl+5","Cmd+5","Abre la ventana del folder de trabajo"),
c("Ctrl+6","Cmd+6","Muestra la ventana de gráficas"),
c("Ctrl+7","Cmd+7","Muestra los paquetes"),
c("Ctrl+8","Cmd+8","Muestra las variables almacenadas"),
c("Ctrl+Shift+K","Cmd+Shift+K","Crea un archivo con la paquetería Knit")
) -> datos
datos <- t(datos) %>% as.data.frame()
colnames(datos) <- c("Windows/Linux","Mac","Acción")
rownames(datos) <- NULL
datos %>% regulartable(cwidth = 2)
# Sumas
5+5
# Restas
8-3
# Múltiplicaciones
6*5
# Divisiones
7/5
# Módulo
8%%2
# Parte entera de la division
6%/%3
# Exponentes
4^5
2**3
# Raíz cudrada
sqrt(144)
# Signo
sign(1)
sign(0)
sign(-1)
sign(-10)
sign(10)
# Valor absoluto
abs(1)
abs(-1)
# Función piso
floor(1.4)
floor(1.9)
# Función techo
ceiling(1.4)
ceiling(1.9)
# Truncar
trunc(1.8564)
# Redondear
round(1.8564,3)
# Significancia
signif(1.574309463,4)
# Logaritmo natural
log(exp(1))
# Logaritmo base 10
log10(10)
# Logaritmo base 2
log2(2)
# Logaritmo base 1.71828
log1p(1.718282)
# Logaritmo genérico, cualquier base
log(3,3)
# Exponencial
exp(2)
# Factorial
factorial(5)
# Pi
pi
# Seno
sin(2*pi)
sinpi(2)
# Coseno
cos(2*pi)
cospi(2)
# Tangente
tan(2*pi)
tanpi(2)
# Arcocoseno
acos(1)
# Arcoseno
asin(0)
# Arcotangente
atan(1)
# Funciones hiperbólicas
sinh(1)
cosh(1)
tanh(1)
acosh(2)
asinh(2)
atanh(2)
atanh(1)
atanh(1/2)
# Complejos
1i*1i
1i
# Parte Real
Re(1+3i)
Re(2i)
# Parte Imaginaria
Im(3+1i)
Im(2)
# Otras funciones con complejos
Mod(1i)
Mod(1+1i)
Mod(7)
Arg(3i)
Arg(3)
Arg(2+7i)
Conj(1i)
Conj(4)
Conj(4+8i)
#objeto simple numérico
a<-1;a
b=4;b
# Todas las operaciones anteriores son objetos numéricos
#Siempre debe ir entre comillas los archivos de tipo texto
#c1<-Hola #error
z<- "Hola mundo"; z
a1="Hola"; a1
b1="a todos"; b1
# Pega el contenido de dos cadenas de caracter
paste(a1,b1)
c1="¿Cómo están?"; c1
paste(a1,b1,c1)
# Cuenta el número de caracteres
nchar(b1)
# Busca una frase dentro de una cadana de caracteres
grep("todos",b1)
# Sólo mayusculas
toupper(b1)
# Sólo minusculas
tolower(a1)
# Cambia el contenido de una cadena
sub("todos","nadie",b1)
# Objeto lógico
e<-TRUE; e
f=F; f
# Validaciónes
## Menor que
6<9
7<2
## Mayor
7>5
## Menor o igual que
5<=7
5<=5
5<=1
## Mayor que
10>1
## Igual
10==11
## Diferente
2!=3
# Verificación de tipo de objeto
is.numeric("42")
is.numeric(13)
is.integer(1.78)
is.logical(30<0)
is.logical(F)
is.character(4)
is.character("¿Qué tal?")
TRUE+15
exp(FALSE)
pi**(-TRUE)
# Vector numérico
x<-c(1,2,3,4); x; str(x)
# Vector de texto
y<-c("R","S","T","W"); y; str(y)
# Vector lógico
z<-c(T,F,F,T); z; str(z)
# Vector númerico
u=c(T,F,T,5); u; str(u)
# Vector carácter
v=c("0",1,2,3,4); v; str(v)
w=c("T",T,F,F,T); w; str(w)
# Se crean dos vectores
x<-c(1,2,3,11,12,20); x
y<-c(4,5,6,10,14,21); y
# Combinación de dos vectores
z<-c(x,y); z
# Si quisieramos extraer las entradas 1,3,5
## error
## z(1,3,5)
## error
## z[1,3,5]
# Devuelve los elementos del vector seleccionadas
z[c(1,3,5)]
# Datos condicionados de un vector
z[z>10]
z[z<15]
## Error no acepta intervalos declarados de esta manera
## z[18>z>1]
# Pero si de esta forma
z[z>1&z<18]
z[z>1|z<18]
# Actualiza el vector completo
z=z/6; z
# Regresa las posiciones en x/y presentes en z
z[x]
z[y]
# Definamos un vector
g<-c(1,2,3,4); g
# Total
sum(g)
# Prodcuto
prod(g)
# Gasto semanal
gs<-c(12,45,0,9,6,25,30); gs
# Etiquetas
names(gs)<-c("Lunes","Martes","Miercoles","Jueves","Viernes","Sabado","Domingo"); gs
gs[4]
gs[gs==max(gs)]
names(gs[gs==max(gs)])
max(gs)
# Función secuencia
seq(from=7, to=38, by=3)
c=seq(from=12, to=50); c
seq(from=100, to=10, by=-10)
d=seq(from=1, to=10, by=0.1); d
e=seq(from=1, to=10, length.out = 22); e
# Función repetir
rep(1,5)
rep(6,9)
x<-c(1,2,3);x
rep(x,2)
rep(c(2,6,9),9)
rep(1:5,2)
rep(c(1,2,3),c(1,4,8))
rep(1:4,c(1,2,3,4))
# Remplazar o actualizar uno o varios elementos
x
x[1]=0; x
x[c(1,3)]=9;x
# Valores faltantes
f=c(1,5,9,NA,5,NA,0); f
# Detecta los elementos vacios o faltantes del vector
sum(is.na(f))
# Elimina los elementos vacios del vector
f<-f[!is.na(f)]; f
# Función de longitud de un vector
length(f)
# Minimo
min(f)
# Maximo
max(f)
# Media o promedio
mean(f)
# Crea un vector de tipo caracter
v=c("a","d","g","h","a","x","V","a","d","g","h","a","x","V"); v
# Nos dice los elementos diferentes que tenemos y cuantas veces se repiten
table(v)
# Calcula el tamaño del vector
length(v)
# Creamos un vector de tipo categórico para hacer analisis de sus elementos
v1=as.factor(v); v1
# Se extraen los elementos del vector sin repetir
levels(v1)
# Me dice cuantos elementos hay de cada elemento del vector
summary(v1)
# Generamos un vector numerico
estaruras<-c(1.7,1.5,1.9,2,1.45,1.7,1.5,1.9,2,1.45,1.68,1.6,1.45,1.72); estaruras
length(estaruras)
# Hace un analisis por clase, en este caso calcula la media
tapply(estaruras,v1,mean)
# Ordenar vectores numericos
## - Ordena en orden ascendente
estaturas=sort(estaruras); estaturas
## - Ordena en orden decreciente
e1=sort(estaruras,decreasing = TRUE); e1
## - Ordenar vector tipo caracter
calidad=c("media","baja","media","alta","media","baja","alta","baja"); calidad
# Le decimos que baja es peor calidad, media es el intermedio y alta es la mejor calidad
calidad1=ordered(calidad,c("baja","media","alta")); calidad1
## - Ordena de manera ascendente
sort(calidad1)
## - Ordena de manera descendente
sort(calidad1,decreasing=TRUE)
# Creamos dos vectores
y <- c("Aguascalientes", "Baja California", "Baja California", "Chihuahua",
"Zacatecas", "Zacatecas", "Zacatecas", "Baja California", "Chihuahua")
z <- c("H", "M", "M", "M", "H", "M", "M", "M", "M")
cbind(EDO = y, SEXO = z) # forma una base de datos a partir de 2 vectores
table(y) # Tabla de frecuencias
table(z)
table(z, y) # Tabla de contingencia
# Remplazamos uno o algunos elementos del vector
replace(letters, c(1, 5, 9, 15, 21), c("A", "E", "I", "O", "U"))
# Creamos un vector numérico
x <- c(4, 1.5, 6, 4, 10, 20, 1, 15, 0); x
# Extraemos la longitud de un vector
n <- length(x); n
#Creamos un vector tipo lógico
id <- x > 6; id; id*1
sum(id)
(sum(id)/n)*100
(1:n)[id]
x[id]
x[(1:n)[id]]
indices<-which(id) #visualiza los indices en los que se cumple id
indices
id2 <- y == "Baja California"; id2
y[id2]
z[id2]
# Matriz vertical (Mnx1)
M1=matrix(1:6); M1
# Matriz General (Mnxm)
M2=matrix(1:6,nrow=2); M2
M3=matrix(1:6,nrow=2,byrow=TRUE); M3
M=matrix(1:6,nrow=3); M
# Número de datos en una matriz
length(M)
# Tipo de matriz
mode(M); str(M)
# Dimensión
dim(M)
# Buscar el nombre o etiqueta de nuestras columnas y renglones
M4=M; M4
rownames(M)<-c("Hugo","Paco","Luis"); M
colnames(M)<-c("Edad","Estatura"); M
dimnames(M4)<-list(c("Hugo","Paco","Luis"),c("Edad","Estatura")); M4
y1=1:24;y1
x1=matrix(1:24,nrow=1,byrow=T); x1
y1[1]
x1[1,1]
# Para saber si tenemos una matriz
is.matrix(y1)
is.matrix(x1)
as.matrix(y1,byrow=T)
# Extracción de datos
M2[1,1]
M3[1,3]
## Error es necesario saber la dimensión de nuestra matriz
## M1[1,2]
# Extracción por columna
M2[,2]
# Extracción de renglones
M2[1,]
M3[]
# Concatenar por columnas
cbind(M3,c(9,8))
# Concatenar por renglón
M5=rbind(M,c(11,10)); M5
rownames(M5)[4]="Pedro"; M5
# Transponer
t(M1)
# Producto matricial
MC<-M1%*%t(M1); MC
# Inversa
solve(matrix(1:4,nrow=2))
# Solución de un sistema de ecuaciones
solve(matrix(1:4,nrow=2),c(1,-1))
# Matriz diagonal
diag(1:4)
# Determinante
det(diag(1:4))
datos<-matrix(c(20,65,174,22,70,180,19,68,170),nrow = 3,byrow=T)
datos
dimnames(datos)<-list(c("hugo","paco","luis"),c("edad","peso","estatura"))
datos
# Regresa todos los elementos de el renglón (obs) dado por nombre de sujeto
datos["hugo",]
# Por número de renglón
datos[1,]
datos["paco",]
datos["luis",]
# Regresa todos los elementos de la columna (var) dada por nombre de columna
datos[,"edad"]
# Por numero de columna
datos[,1]
datos[,"peso"]
datos[,"estatura"]
# Extraccion por coordenadas
datos[1,1]
datos["hugo","edad"]
datos[2,2]
datos["paco","peso"]
datos[3,3]
datos["luis","estatura"]
datos["luis",2]
datos[2,"estatura"]
# Extracción de más de una variable u observación
datos[,c("edad","estatura")]
datos[c("hugo","luis"),]
# Extracción de los nombres de reglones y columnas.
dimnames(datos)
colnames(datos)
rownames(datos)
# Cálculo de media por variable
apply(datos,2,mean)
apply(datos,1,mean)
Arreglos
library(actuar)
install.packages("modeest")
# Media, Mediana
mean(x); median(x); quantile(x)[3]
#Ejemplo. Consideremos la siguiente muestra que representa las
#calificaciones de alumnos en el primer parcial de Estadística II
x=c(0,1,2,2,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,
8,8,8,8,9,9,10)
# Con estos datos haremos un análisis descriptivo
# Media, Mediana
mean(x); median(x); quantile(x)[3]
# Cargamos la paqueteria
library(modeest)
#Aplicamos la función
mfv(x)
#Varianza y Desviacion estandar
var(x); s=sd(x)
#histograma de frecuencia acumulada
hist(x,breaks=10,col="green2",main="Histograma de calificiaciones",xlab="Calificaciones",ylab="Frecuencia acumulada")
box()
#histograma de frecuencia acumulada
hist(x,breaks=10,col="green2",main="Histograma de calificiaciones",xlab="Calificaciones",ylab="Frecuencia acumulada")
